Resources:
  ACCESSKEYSROTATED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: access-keys-rotated
      Description: >-
        Checks whether the active access keys are rotated within the number of days specified in maxAccessKeyAge. The rule is non-compliant if the access keys have not been rotated for more than maxAccessKeyAge
        number of days.
      InputParameters:
        accesskeysrotatedmaxAccessKeyAge: !If
          - accesskeysrotatedmaxAccessKeyAge
          - !Ref 'accesskeysrotatedmaxAccessKeyAge'
          - !Ref 'AWS::NoValue'
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: ACCESS_KEYS_ROTATED
  ACCOUNTPARTOFORGANIZATIONS:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: account-part-of-organizations
      Description: >-
        Rule checks whether AWS account is part of AWS Organizations. The rule is NON_COMPLIANT if the AWS account is not part of AWS Organizations or AWS Organizations master account ID does not match
        rule parameter MasterAccountId.
      InputParameters:
        accountpartoforganizationsMasterAccountId: !If
          - accountpartoforganizationsMasterAccountId
          - !Ref 'accountpartoforganizationsMasterAccountId'
          - !Ref 'AWS::NoValue'
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: ACCOUNT_PART_OF_ORGANIZATIONS
  ALBHTTPTOHTTPSREDIRECTIONCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: alb-http-to-https-redirection-check
      Description: >-
        Checks whether HTTP to HTTPS redirection is configured on all HTTP listeners of Application Load Balancers. The rule is NON_COMPLIANT if one or more HTTP listeners of Application Load Balancer do
        not have HTTP to HTTPS redirection configured.
      InputParameters: {}
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: ALB_HTTP_TO_HTTPS_REDIRECTION_CHECK
  ALBWAFENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: alb-waf-enabled
      Description: 'Checks if Web Application Firewall (WAF) is enabled on Application Load Balancers (ALBs). This rule is NON_COMPLIANT if key: waf.enabled is set to false.'
      InputParameters:
        albwafenabledwafWebAclIds: !If
          - albwafenabledwafWebAclIds
          - !Ref 'albwafenabledwafWebAclIds'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::ElasticLoadBalancingV2::LoadBalancer
      Source:
        Owner: AWS
        SourceIdentifier: ALB_WAF_ENABLED
  APPROVEDAMISBYID:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: approved-amis-by-id
      Description: Checks whether running instances are using specified AMIs.
      InputParameters:
        approvedamisbyidamiIds: !If
          - approvedamisbyidamiIds
          - !Ref 'approvedamisbyidamiIds'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: APPROVED_AMIS_BY_ID
  APPROVEDAMISBYTAG:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: approved-amis-by-tag
      Description: Checks whether running instances are using specified AMIs.
      InputParameters:
        approvedamisbytagamisByTagKeyAndValue: !If
          - approvedamisbytagamisByTagKeyAndValue
          - !Ref 'approvedamisbytagamisByTagKeyAndValue'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: APPROVED_AMIS_BY_TAG
  BACKUPPLANMINFREQUENCYANDMINRETENTIONCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: backup-plan-min-frequency-and-min-retention-check
      Description: >-
        Checks if a backup plan has a backup rule that satisfies the required frequency and retention period. The rule is NON_COMPLIANT if recovery points are not created at least as often as the specified
        frequency or expire before the specified period.
      InputParameters:
        backupplanminfrequencyandminretentioncheckrequiredFrequencyValue: !If
          - backupplanminfrequencyandminretentioncheckrequiredFrequencyValue
          - !Ref 'backupplanminfrequencyandminretentioncheckrequiredFrequencyValue'
          - !Ref 'AWS::NoValue'
        backupplanminfrequencyandminretentioncheckrequiredRetentionDays: !If
          - backupplanminfrequencyandminretentioncheckrequiredRetentionDays
          - !Ref 'backupplanminfrequencyandminretentioncheckrequiredRetentionDays'
          - !Ref 'AWS::NoValue'
        backupplanminfrequencyandminretentioncheckrequiredFrequencyUnit: !If
          - backupplanminfrequencyandminretentioncheckrequiredFrequencyUnit
          - !Ref 'backupplanminfrequencyandminretentioncheckrequiredFrequencyUnit'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::Backup::BackupPlan
      Source:
        Owner: AWS
        SourceIdentifier: BACKUP_PLAN_MIN_FREQUENCY_AND_MIN_RETENTION_CHECK
  BACKUPRECOVERYPOINTENCRYPTED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: backup-recovery-point-encrypted
      Description: Checks if a recovery point is encrypted. The rule is NON_COMPLIANT if the recovery point is not encrypted.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::Backup::RecoveryPoint
      Source:
        Owner: AWS
        SourceIdentifier: BACKUP_RECOVERY_POINT_ENCRYPTED
  BACKUPRECOVERYPOINTMANUALDELETIONDISABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: backup-recovery-point-manual-deletion-disabled
      Description: >-
        Checks if a backup vault has an attached resource-based policy which prevents deletion of recovery points. The rule is NON_COMPLIANT if the Backup Vault does not have resource-based policies or
        has policies without a suitable 'Deny' statement.
      InputParameters:
        backuprecoverypointmanualdeletiondisabledprincipalArnList: !If
          - backuprecoverypointmanualdeletiondisabledprincipalArnList
          - !Ref 'backuprecoverypointmanualdeletiondisabledprincipalArnList'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::Backup::BackupVault
      Source:
        Owner: AWS
        SourceIdentifier: BACKUP_RECOVERY_POINT_MANUAL_DELETION_DISABLED
  BACKUPRECOVERYPOINTMINIMUMRETENTIONCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: backup-recovery-point-minimum-retention-check
      Description: Checks if a recovery point expires no earlier than after the specified period. The rule is NON_COMPLIANT if the recovery point has a retention point that is less than the required retention
        period.
      InputParameters:
        backuprecoverypointminimumretentioncheckrequiredRetentionDays: !If
          - backuprecoverypointminimumretentioncheckrequiredRetentionDays
          - !Ref 'backuprecoverypointminimumretentioncheckrequiredRetentionDays'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::Backup::RecoveryPoint
      Source:
        Owner: AWS
        SourceIdentifier: BACKUP_RECOVERY_POINT_MINIMUM_RETENTION_CHECK
  CLOUDFORMATIONSTACKDRIFTDETECTIONCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: cloudformation-stack-drift-detection-check
      Description: Checks whether your CloudFormation stacks' actual configuration differs, or has drifted, from its expected configuration.
      InputParameters:
        cloudformationstackdriftdetectioncheckcloudformationRoleArn: !If
          - cloudformationstackdriftdetectioncheckcloudformationRoleArn
          - !Ref 'cloudformationstackdriftdetectioncheckcloudformationRoleArn'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::CloudFormation::Stack
      Source:
        Owner: AWS
        SourceIdentifier: CLOUDFORMATION_STACK_DRIFT_DETECTION_CHECK
  CLOUDFORMATIONSTACKNOTIFICATIONCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: cloudformation-stack-notification-check
      Description: Checks whether your CloudFormation stacks are sending event notifications to an SNS topic. Optionally checks whether specified SNS topics are used.
      InputParameters:
        cloudformationstacknotificationchecksnsTopic1: !If
          - cloudformationstacknotificationchecksnsTopic1
          - !Ref 'cloudformationstacknotificationchecksnsTopic1'
          - !Ref 'AWS::NoValue'
        cloudformationstacknotificationchecksnsTopic2: !If
          - cloudformationstacknotificationchecksnsTopic2
          - !Ref 'cloudformationstacknotificationchecksnsTopic2'
          - !Ref 'AWS::NoValue'
        cloudformationstacknotificationchecksnsTopic3: !If
          - cloudformationstacknotificationchecksnsTopic3
          - !Ref 'cloudformationstacknotificationchecksnsTopic3'
          - !Ref 'AWS::NoValue'
        cloudformationstacknotificationchecksnsTopic4: !If
          - cloudformationstacknotificationchecksnsTopic4
          - !Ref 'cloudformationstacknotificationchecksnsTopic4'
          - !Ref 'AWS::NoValue'
        cloudformationstacknotificationchecksnsTopic5: !If
          - cloudformationstacknotificationchecksnsTopic5
          - !Ref 'cloudformationstacknotificationchecksnsTopic5'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::CloudFormation::Stack
      Source:
        Owner: AWS
        SourceIdentifier: CLOUDFORMATION_STACK_NOTIFICATION_CHECK
  CLOUDTRAILCLOUDWATCHLOGSENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: cloud-trail-cloud-watch-logs-enabled
      Description: Checks whether AWS CloudTrail trails are configured to send logs to Amazon CloudWatch logs. The trail is non-compliant if the CloudWatchLogsLogGroupArn property of the trail is empty.
      InputParameters:
        cloudtrailcloudwatchlogsenabledexpectedDeliveryWindowAge: !If
          - cloudtrailcloudwatchlogsenabledexpectedDeliveryWindowAge
          - !Ref 'cloudtrailcloudwatchlogsenabledexpectedDeliveryWindowAge'
          - !Ref 'AWS::NoValue'
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: CLOUD_TRAIL_CLOUD_WATCH_LOGS_ENABLED
  CLOUDTRAILENCRYPTIONENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: cloud-trail-encryption-enabled
      Description: >-
        Checks whether AWS CloudTrail is configured to use the server side encryption (SSE) AWS Key Management Service (AWS KMS) customer master key (CMK) encryption. The rule is compliant if the KmsKeyId
        is defined.
      InputParameters: {}
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: CLOUD_TRAIL_ENCRYPTION_ENABLED
  CLOUDTRAILLOGFILEVALIDATIONENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: cloud-trail-log-file-validation-enabled
      Description: Checks whether AWS CloudTrail creates a signed digest file with logs. AWS recommends that the file validation must be enabled on all trails. The rule is noncompliant if the validation
        is not enabled.
      InputParameters: {}
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: CLOUD_TRAIL_LOG_FILE_VALIDATION_ENABLED
  CLOUDTRAILS3DATAEVENTSENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: cloudtrail-s3-dataevents-enabled
      Description: Checks whether at least one AWS CloudTrail trail is logging Amazon S3 data events for all S3 buckets. The rule is NON_COMPLIANT if trails log data events for S3 buckets is not configured.
      InputParameters:
        cloudtrails3dataeventsenabledS3BucketNames: !If
          - cloudtrails3dataeventsenabledS3BucketNames
          - !Ref 'cloudtrails3dataeventsenabledS3BucketNames'
          - !Ref 'AWS::NoValue'
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: CLOUDTRAIL_S3_DATAEVENTS_ENABLED
  CLOUDWATCHLOGGROUPENCRYPTED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: cloudwatch-log-group-encrypted
      Description: >-
        Checks if Amazon CloudWatch Log Groups are encrypted with any AWS KMS key or a specified AWS KMS key Id. The rule is NON_COMPLIANT if a CloudWatch Log Group is not encrypted with a KMS key or is
        encrypted with a KMS key not supplied in the rule parameter.
      InputParameters:
        cloudwatchloggroupencryptedKmsKeyId: !If
          - cloudwatchloggroupencryptedKmsKeyId
          - !Ref 'cloudwatchloggroupencryptedKmsKeyId'
          - !Ref 'AWS::NoValue'
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: CLOUDWATCH_LOG_GROUP_ENCRYPTED
  CMKBACKINGKEYROTATIONENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: cmk-backing-key-rotation-enabled
      Description: >-
        Checks if automatic key rotation is enabled for each key and matches to the key ID of the customer created AWS KMS key. The rule is NON_COMPLIANT if the AWS Config recorder role for a resource does
        not have the kms:DescribeKey permission.
      InputParameters: {}
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: CMK_BACKING_KEY_ROTATION_ENABLED
  CWLOGGROUPRETENTIONPERIODCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: cw-loggroup-retention-period-check
      Description: >-
        Checks whether Amazon CloudWatch LogGroup retention period is set to specific number of days. The rule is NON_COMPLIANT if the retention period is not set or is less than the configured retention
        period.
      InputParameters:
        cwloggroupretentionperiodcheckLogGroupNames: !If
          - cwloggroupretentionperiodcheckLogGroupNames
          - !Ref 'cwloggroupretentionperiodcheckLogGroupNames'
          - !Ref 'AWS::NoValue'
        cwloggroupretentionperiodcheckMinRetentionTime: !If
          - cwloggroupretentionperiodcheckMinRetentionTime
          - !Ref 'cwloggroupretentionperiodcheckMinRetentionTime'
          - !Ref 'AWS::NoValue'
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: CW_LOGGROUP_RETENTION_PERIOD_CHECK
  DBINSTANCEBACKUPENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: db-instance-backup-enabled
      Description: Checks whether RDS DB instances have backups enabled.
      InputParameters:
        dbinstancebackupenabledbackupRetentionPeriod: !If
          - dbinstancebackupenabledbackupRetentionPeriod
          - !Ref 'dbinstancebackupenabledbackupRetentionPeriod'
          - !Ref 'AWS::NoValue'
        dbinstancebackupenabledbackupRetentionMinimum: !If
          - dbinstancebackupenabledbackupRetentionMinimum
          - !Ref 'dbinstancebackupenabledbackupRetentionMinimum'
          - !Ref 'AWS::NoValue'
        dbinstancebackupenabledpreferredBackupWindow: !If
          - dbinstancebackupenabledpreferredBackupWindow
          - !Ref 'dbinstancebackupenabledpreferredBackupWindow'
          - !Ref 'AWS::NoValue'
        dbinstancebackupenabledcheckReadReplicas: !If
          - dbinstancebackupenabledcheckReadReplicas
          - !Ref 'dbinstancebackupenabledcheckReadReplicas'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBInstance
      Source:
        Owner: AWS
        SourceIdentifier: DB_INSTANCE_BACKUP_ENABLED
  DESIREDINSTANCETYPE:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: desired-instance-type
      Description: Checks whether your EC2 instances are of the specified instance types.
      InputParameters:
        desiredinstancetypeinstanceType: !If
          - desiredinstancetypeinstanceType
          - !Ref 'desiredinstancetypeinstanceType'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: DESIRED_INSTANCE_TYPE
  DMSREPLICATIONNOTPUBLIC:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: dms-replication-not-public
      Description: Checks whether AWS Database Migration Service replication instances are public. The rule is NON_COMPLIANT if PubliclyAccessible field is True.
      InputParameters: {}
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: DMS_REPLICATION_NOT_PUBLIC
  EBSINBACKUPPLAN:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ebs-in-backup-plan
      Description: Check if Amazon Elastic Block Store (Amazon EBS) volumes are added in backup plans of AWS Backup. The rule is NON_COMPLIANT if Amazon EBS volumes are not included in backup plans.
      InputParameters: {}
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: EBS_IN_BACKUP_PLAN
  EBSLASTBACKUPRECOVERYPOINTCREATED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ebs-last-backup-recovery-point-created
      Description: >-
        Checks if a recovery point was created for Amazon Elastic Block Store (Amazon EBS). The rule is NON_COMPLIANT if the Amazon EBS volume does not have a corresponding recovery point created within
        the specified time period.
      InputParameters:
        ebslastbackuprecoverypointcreatedresourceTags: !If
          - ebslastbackuprecoverypointcreatedresourceTags
          - !Ref 'ebslastbackuprecoverypointcreatedresourceTags'
          - !Ref 'AWS::NoValue'
        ebslastbackuprecoverypointcreatedresourceId: !If
          - ebslastbackuprecoverypointcreatedresourceId
          - !Ref 'ebslastbackuprecoverypointcreatedresourceId'
          - !Ref 'AWS::NoValue'
        ebslastbackuprecoverypointcreatedrecoveryPointAgeValue: !If
          - ebslastbackuprecoverypointcreatedrecoveryPointAgeValue
          - !Ref 'ebslastbackuprecoverypointcreatedrecoveryPointAgeValue'
          - !Ref 'AWS::NoValue'
        ebslastbackuprecoverypointcreatedrecoveryPointAgeUnit: !If
          - ebslastbackuprecoverypointcreatedrecoveryPointAgeUnit
          - !Ref 'ebslastbackuprecoverypointcreatedrecoveryPointAgeUnit'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Volume
      Source:
        Owner: AWS
        SourceIdentifier: EBS_LAST_BACKUP_RECOVERY_POINT_CREATED
  EBSOPTIMIZEDINSTANCE:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ebs-optimized-instance
      Description: Checks whether EBS optimization is enabled for your EC2 instances that can be EBS-optimized.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: EBS_OPTIMIZED_INSTANCE
  EBSRESOURCESPROTECTEDBYBACKUPPLAN:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ebs-resources-protected-by-backup-plan
      Description: Checks if Amazon Elastic Block Store (Amazon EBS) volumes are protected by a backup plan. The rule is NON_COMPLIANT if the Amazon EBS volume is not covered by a backup plan.
      InputParameters:
        ebsresourcesprotectedbybackupplanresourceTags: !If
          - ebsresourcesprotectedbybackupplanresourceTags
          - !Ref 'ebsresourcesprotectedbybackupplanresourceTags'
          - !Ref 'AWS::NoValue'
        ebsresourcesprotectedbybackupplanresourceId: !If
          - ebsresourcesprotectedbybackupplanresourceId
          - !Ref 'ebsresourcesprotectedbybackupplanresourceId'
          - !Ref 'AWS::NoValue'
        ebsresourcesprotectedbybackupplancrossRegionList: !If
          - ebsresourcesprotectedbybackupplancrossRegionList
          - !Ref 'ebsresourcesprotectedbybackupplancrossRegionList'
          - !Ref 'AWS::NoValue'
        ebsresourcesprotectedbybackupplancrossAccountList: !If
          - ebsresourcesprotectedbybackupplancrossAccountList
          - !Ref 'ebsresourcesprotectedbybackupplancrossAccountList'
          - !Ref 'AWS::NoValue'
        ebsresourcesprotectedbybackupplanmaxRetentionDays: !If
          - ebsresourcesprotectedbybackupplanmaxRetentionDays
          - !Ref 'ebsresourcesprotectedbybackupplanmaxRetentionDays'
          - !Ref 'AWS::NoValue'
        ebsresourcesprotectedbybackupplanminRetentionDays: !If
          - ebsresourcesprotectedbybackupplanminRetentionDays
          - !Ref 'ebsresourcesprotectedbybackupplanminRetentionDays'
          - !Ref 'AWS::NoValue'
        ebsresourcesprotectedbybackupplanbackupVaultLockCheck: !If
          - ebsresourcesprotectedbybackupplanbackupVaultLockCheck
          - !Ref 'ebsresourcesprotectedbybackupplanbackupVaultLockCheck'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Volume
      Source:
        Owner: AWS
        SourceIdentifier: EBS_RESOURCES_PROTECTED_BY_BACKUP_PLAN
  EBSSNAPSHOTPUBLICRESTORABLECHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ebs-snapshot-public-restorable-check
      Description: >-
        Checks whether Amazon Elastic Block Store (Amazon EBS) snapshots are not publicly restorable. The rule is NON_COMPLIANT if one or more snapshots with RestorableByUserIds field are set to all, that
        is, Amazon EBS snapshots are public.
      InputParameters: {}
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: EBS_SNAPSHOT_PUBLIC_RESTORABLE_CHECK
  EC2EBSENCRYPTIONBYDEFAULT:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ec2-ebs-encryption-by-default
      Description: Check that Amazon Elastic Block Store (EBS) encryption is enabled by default. The rule is NON_COMPLIANT if the encryption is not enabled.
      InputParameters: {}
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: EC2_EBS_ENCRYPTION_BY_DEFAULT
  EC2IMDSV2CHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ec2-imdsv2-check
      Description: >-
        Checks whether your Amazon Elastic Compute Cloud (Amazon EC2) instance metadata version is configured with Instance Metadata Service Version 2 (IMDSv2). The rule is NON_COMPLIANT if the HttpTokens
        is set to optional.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_IMDSV2_CHECK
  EC2INSTANCEDETAILEDMONITORINGENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ec2-instance-detailed-monitoring-enabled
      Description: Checks whether detailed monitoring is enabled for EC2 instances.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_INSTANCE_DETAILED_MONITORING_ENABLED
  EC2INSTANCENOPUBLICIP:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ec2-instance-no-public-ip
      Description: >-
        Checks whether Amazon Elastic Compute Cloud (Amazon EC2) instances have a public IP association. The rule is NON_COMPLIANT if the publicIp field is present in the Amazon EC2 instance configuration
        item. This rule applies only to IPv4.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_INSTANCE_NO_PUBLIC_IP
  EC2INSTANCEPROFILEATTACHED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ec2-instance-profile-attached
      Description: >-
        Checks if an Amazon Elastic Compute Cloud (Amazon EC2) instance has an Identity and Access Management (IAM) profile attached to it. This rule is NON_COMPLIANT if no IAM profile is attached to the
        Amazon EC2 instance.
      InputParameters:
        ec2instanceprofileattachedIamInstanceProfileArnList: !If
          - ec2instanceprofileattachedIamInstanceProfileArnList
          - !Ref 'ec2instanceprofileattachedIamInstanceProfileArnList'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_INSTANCE_PROFILE_ATTACHED
  EC2LASTBACKUPRECOVERYPOINTCREATED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ec2-last-backup-recovery-point-created
      Description: >-
        Checks if a recovery point was created for Amazon Elastic Compute Cloud (Amazon EC2) instances. The rule is NON_COMPLIANT if the Amazon EC2 instance does not have a corresponding recovery point
        created within the specified time period.
      InputParameters:
        ec2lastbackuprecoverypointcreatedresourceTags: !If
          - ec2lastbackuprecoverypointcreatedresourceTags
          - !Ref 'ec2lastbackuprecoverypointcreatedresourceTags'
          - !Ref 'AWS::NoValue'
        ec2lastbackuprecoverypointcreatedresourceId: !If
          - ec2lastbackuprecoverypointcreatedresourceId
          - !Ref 'ec2lastbackuprecoverypointcreatedresourceId'
          - !Ref 'AWS::NoValue'
        ec2lastbackuprecoverypointcreatedrecoveryPointAgeValue: !If
          - ec2lastbackuprecoverypointcreatedrecoveryPointAgeValue
          - !Ref 'ec2lastbackuprecoverypointcreatedrecoveryPointAgeValue'
          - !Ref 'AWS::NoValue'
        ec2lastbackuprecoverypointcreatedrecoveryPointAgeUnit: !If
          - ec2lastbackuprecoverypointcreatedrecoveryPointAgeUnit
          - !Ref 'ec2lastbackuprecoverypointcreatedrecoveryPointAgeUnit'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_LAST_BACKUP_RECOVERY_POINT_CREATED
  EC2LAUNCHTEMPLATEPUBLICIPDISABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ec2-launch-template-public-ip-disabled
      Description: >-
        Checks if Amazon EC2 Launch Templates are set to assign public IP addresses to Network Interfaces. The rule is NON_COMPLIANT if the default version of an EC2 Launch Template has at least 1 Network
        Interface with 'AssociatePublicIpAddress' set to 'true'.
      InputParameters:
        ec2launchtemplatepublicipdisabledexemptedLaunchTemplates: !If
          - ec2launchtemplatepublicipdisabledexemptedLaunchTemplates
          - !Ref 'ec2launchtemplatepublicipdisabledexemptedLaunchTemplates'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::LaunchTemplate
      Source:
        Owner: AWS
        SourceIdentifier: EC2_LAUNCH_TEMPLATE_PUBLIC_IP_DISABLED
  EC2MANAGEDINSTANCEAPPLICATIONSBLACKLISTED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ec2-managedinstance-applications-blacklisted
      Description: >-
        Checks that none of the specified applications are installed on the instance. Optionally, specify the version. Newer versions will not be blacklisted. Optionally, specify the platform to apply the
        rule only to instances running that platform.
      InputParameters:
        ec2managedinstanceapplicationsblacklistedapplicationNames: !If
          - ec2managedinstanceapplicationsblacklistedapplicationNames
          - !Ref 'ec2managedinstanceapplicationsblacklistedapplicationNames'
          - !Ref 'AWS::NoValue'
        ec2managedinstanceapplicationsblacklistedplatformType: !If
          - ec2managedinstanceapplicationsblacklistedplatformType
          - !Ref 'ec2managedinstanceapplicationsblacklistedplatformType'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::SSM::ManagedInstanceInventory
      Source:
        Owner: AWS
        SourceIdentifier: EC2_MANAGEDINSTANCE_APPLICATIONS_BLACKLISTED
  EC2MANAGEDINSTANCEAPPLICATIONSREQUIRED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ec2-managedinstance-applications-required
      Description: >-
        Checks whether all of the specified applications are installed on the instance. Optionally, specify the minimum acceptable version. Optionally, specify the platform to apply the rule only to instances
        running that platform.
      InputParameters:
        ec2managedinstanceapplicationsrequiredapplicationNames: !If
          - ec2managedinstanceapplicationsrequiredapplicationNames
          - !Ref 'ec2managedinstanceapplicationsrequiredapplicationNames'
          - !Ref 'AWS::NoValue'
        ec2managedinstanceapplicationsrequiredplatformType: !If
          - ec2managedinstanceapplicationsrequiredplatformType
          - !Ref 'ec2managedinstanceapplicationsrequiredplatformType'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::SSM::ManagedInstanceInventory
      Source:
        Owner: AWS
        SourceIdentifier: EC2_MANAGEDINSTANCE_APPLICATIONS_REQUIRED
  EC2MANAGEDINSTANCEASSOCIATIONCOMPLIANCESTATUSCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ec2-managedinstance-association-compliance-status-check
      Description: >-
        Checks whether the compliance status of the AWS Systems Manager association compliance is COMPLIANT or NON_COMPLIANT after the association execution on the instance. The rule is compliant if the
        field status is COMPLIANT.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::SSM::AssociationCompliance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_MANAGEDINSTANCE_ASSOCIATION_COMPLIANCE_STATUS_CHECK
  EC2MANAGEDINSTANCEINVENTORYBLACKLISTED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ec2-managedinstance-inventory-blacklisted
      Description: Checks whether instances managed by Amazon EC2 Systems Manager are configured to collect blacklisted inventory types.
      InputParameters:
        ec2managedinstanceinventoryblacklistedinventoryNames: !If
          - ec2managedinstanceinventoryblacklistedinventoryNames
          - !Ref 'ec2managedinstanceinventoryblacklistedinventoryNames'
          - !Ref 'AWS::NoValue'
        ec2managedinstanceinventoryblacklistedplatformType: !If
          - ec2managedinstanceinventoryblacklistedplatformType
          - !Ref 'ec2managedinstanceinventoryblacklistedplatformType'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::SSM::ManagedInstanceInventory
      Source:
        Owner: AWS
        SourceIdentifier: EC2_MANAGEDINSTANCE_INVENTORY_BLACKLISTED
  EC2MANAGEDINSTANCEPATCHCOMPLIANCESTATUSCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ec2-managedinstance-patch-compliance-status-check
      Description: >-
        Checks whether the compliance status of the AWS Systems Manager patch compliance is COMPLIANT or NON_COMPLIANT after the patch installation on the instance. The rule is compliant if the field status
        is COMPLIANT.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::SSM::PatchCompliance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_MANAGEDINSTANCE_PATCH_COMPLIANCE_STATUS_CHECK
  EC2MANAGEDINSTANCEPLATFORMCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ec2-managedinstance-platform-check
      Description: Checks whether EC2 managed instances have the desired configurations.
      InputParameters:
        ec2managedinstanceplatformcheckplatformType: !If
          - ec2managedinstanceplatformcheckplatformType
          - !Ref 'ec2managedinstanceplatformcheckplatformType'
          - !Ref 'AWS::NoValue'
        ec2managedinstanceplatformcheckplatformVersion: !If
          - ec2managedinstanceplatformcheckplatformVersion
          - !Ref 'ec2managedinstanceplatformcheckplatformVersion'
          - !Ref 'AWS::NoValue'
        ec2managedinstanceplatformcheckagentVersion: !If
          - ec2managedinstanceplatformcheckagentVersion
          - !Ref 'ec2managedinstanceplatformcheckagentVersion'
          - !Ref 'AWS::NoValue'
        ec2managedinstanceplatformcheckplatformName: !If
          - ec2managedinstanceplatformcheckplatformName
          - !Ref 'ec2managedinstanceplatformcheckplatformName'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::SSM::ManagedInstanceInventory
      Source:
        Owner: AWS
        SourceIdentifier: EC2_MANAGEDINSTANCE_PLATFORM_CHECK
  EC2NOAMAZONKEYPAIR:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ec2-no-amazon-key-pair
      Description: Checks if running Amazon Elastic Compute Cloud (EC2) instances are launched using amazon key pairs. The rule is NON_COMPLIANT if a running EC2 instance is launched with a key pair.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_NO_AMAZON_KEY_PAIR
  EC2RESOURCESPROTECTEDBYBACKUPPLAN:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ec2-resources-protected-by-backup-plan
      Description: Checks if Amazon Elastic Compute Cloud (Amazon EC2) instances are protected by a backup plan. The rule is NON_COMPLIANT if the Amazon EC2 instance is not covered by a backup plan.
      InputParameters:
        ec2resourcesprotectedbybackupplanresourceTags: !If
          - ec2resourcesprotectedbybackupplanresourceTags
          - !Ref 'ec2resourcesprotectedbybackupplanresourceTags'
          - !Ref 'AWS::NoValue'
        ec2resourcesprotectedbybackupplanresourceId: !If
          - ec2resourcesprotectedbybackupplanresourceId
          - !Ref 'ec2resourcesprotectedbybackupplanresourceId'
          - !Ref 'AWS::NoValue'
        ec2resourcesprotectedbybackupplancrossRegionList: !If
          - ec2resourcesprotectedbybackupplancrossRegionList
          - !Ref 'ec2resourcesprotectedbybackupplancrossRegionList'
          - !Ref 'AWS::NoValue'
        ec2resourcesprotectedbybackupplancrossAccountList: !If
          - ec2resourcesprotectedbybackupplancrossAccountList
          - !Ref 'ec2resourcesprotectedbybackupplancrossAccountList'
          - !Ref 'AWS::NoValue'
        ec2resourcesprotectedbybackupplanmaxRetentionDays: !If
          - ec2resourcesprotectedbybackupplanmaxRetentionDays
          - !Ref 'ec2resourcesprotectedbybackupplanmaxRetentionDays'
          - !Ref 'AWS::NoValue'
        ec2resourcesprotectedbybackupplanminRetentionDays: !If
          - ec2resourcesprotectedbybackupplanminRetentionDays
          - !Ref 'ec2resourcesprotectedbybackupplanminRetentionDays'
          - !Ref 'AWS::NoValue'
        ec2resourcesprotectedbybackupplanbackupVaultLockCheck: !If
          - ec2resourcesprotectedbybackupplanbackupVaultLockCheck
          - !Ref 'ec2resourcesprotectedbybackupplanbackupVaultLockCheck'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_RESOURCES_PROTECTED_BY_BACKUP_PLAN
  EC2STOPPEDINSTANCE:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ec2-stopped-instance
      Description: Checks whether there are instances stopped for more than the allowed number of days.
      InputParameters:
        ec2stoppedinstanceAllowedDays: !If
          - ec2stoppedinstanceAllowedDays
          - !Ref 'ec2stoppedinstanceAllowedDays'
          - !Ref 'AWS::NoValue'
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: EC2_STOPPED_INSTANCE
  EC2TRANSITGATEWAYAUTOVPCATTACHDISABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ec2-transit-gateway-auto-vpc-attach-disabled
      Description: >-
        Checks if Amazon Elastic Compute Cloud (Amazon EC2) Transit Gateways have 'AutoAcceptSharedAttachments' enabled. The rule is NON_COMPLIANT for a Transit Gateway if 'AutoAcceptSharedAttachments'
        is set to 'enable'.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::TransitGateway
      Source:
        Owner: AWS
        SourceIdentifier: EC2_TRANSIT_GATEWAY_AUTO_VPC_ATTACH_DISABLED
  EC2VOLUMEINUSECHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: ec2-volume-inuse-check
      Description: Checks whether EBS volumes are attached to EC2 instances.
      InputParameters:
        ec2volumeinusecheckdeleteOnTermination: !If
          - ec2volumeinusecheckdeleteOnTermination
          - !Ref 'ec2volumeinusecheckdeleteOnTermination'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Volume
      Source:
        Owner: AWS
        SourceIdentifier: EC2_VOLUME_INUSE_CHECK
  EFSACCESSPOINTENFORCEROOTDIRECTORY:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: efs-access-point-enforce-root-directory
      Description: >-
        Checks if Amazon Elastic File System (Amazon EFS) access points are configured to enforce a root directory. The rule is NON_COMPLIANT if the value of 'Path' is set to '/' (default root directory
        of the file system).
      InputParameters:
        efsaccesspointenforcerootdirectoryapprovedDirectories: !If
          - efsaccesspointenforcerootdirectoryapprovedDirectories
          - !Ref 'efsaccesspointenforcerootdirectoryapprovedDirectories'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::EFS::AccessPoint
      Source:
        Owner: AWS
        SourceIdentifier: EFS_ACCESS_POINT_ENFORCE_ROOT_DIRECTORY
  EFSACCESSPOINTENFORCEUSERIDENTITY:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: efs-access-point-enforce-user-identity
      Description: >-
        Checks if Amazon Elastic File System (Amazon EFS) access points are configured to enforce a user identity. The rule is NON_COMPLIANT if 'PosixUser' is not defined or if parameters are provided and
        there is no match in the corresponding parameter.
      InputParameters:
        efsaccesspointenforceuseridentityapprovedUids: !If
          - efsaccesspointenforceuseridentityapprovedUids
          - !Ref 'efsaccesspointenforceuseridentityapprovedUids'
          - !Ref 'AWS::NoValue'
        efsaccesspointenforceuseridentityapprovedGids: !If
          - efsaccesspointenforceuseridentityapprovedGids
          - !Ref 'efsaccesspointenforceuseridentityapprovedGids'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::EFS::AccessPoint
      Source:
        Owner: AWS
        SourceIdentifier: EFS_ACCESS_POINT_ENFORCE_USER_IDENTITY
  EFSENCRYPTEDCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: efs-encrypted-check
      Description: >-
        Checks whether Amazon EFS are configured to encrypt file data using AWS KMS. The rule is NON_COMPLIANT if the Encrypted key is set to False on DescribeFileSystems or, if specified, KmsKeyId key
        on DescribeFileSystems is not matching KmsKeyId parameter.
      InputParameters:
        efsencryptedcheckKmsKeyId: !If
          - efsencryptedcheckKmsKeyId
          - !Ref 'efsencryptedcheckKmsKeyId'
          - !Ref 'AWS::NoValue'
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: EFS_ENCRYPTED_CHECK
  EFSINBACKUPPLAN:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: efs-in-backup-plan
      Description: Checks whether Amazon Elastic File System (Amazon EFS) file systems are added in the backup plans of AWS Backup. The rule is NON_COMPLIANT if EFS file systems are not included in the
        backup plans.
      InputParameters: {}
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: EFS_IN_BACKUP_PLAN
  EFSLASTBACKUPRECOVERYPOINTCREATED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: efs-last-backup-recovery-point-created
      Description: >-
        Checks if a recovery point was created for Amazon Elastic File System (Amazon EFS) File Systems. The rule is NON_COMPLIANT if the Amazon EFS File System does not have a corresponding Recovery Point
        created within the specified time period.
      InputParameters:
        efslastbackuprecoverypointcreatedresourceTags: !If
          - efslastbackuprecoverypointcreatedresourceTags
          - !Ref 'efslastbackuprecoverypointcreatedresourceTags'
          - !Ref 'AWS::NoValue'
        efslastbackuprecoverypointcreatedresourceId: !If
          - efslastbackuprecoverypointcreatedresourceId
          - !Ref 'efslastbackuprecoverypointcreatedresourceId'
          - !Ref 'AWS::NoValue'
        efslastbackuprecoverypointcreatedrecoveryPointAgeValue: !If
          - efslastbackuprecoverypointcreatedrecoveryPointAgeValue
          - !Ref 'efslastbackuprecoverypointcreatedrecoveryPointAgeValue'
          - !Ref 'AWS::NoValue'
        efslastbackuprecoverypointcreatedrecoveryPointAgeUnit: !If
          - efslastbackuprecoverypointcreatedrecoveryPointAgeUnit
          - !Ref 'efslastbackuprecoverypointcreatedrecoveryPointAgeUnit'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::EFS::FileSystem
      Source:
        Owner: AWS
        SourceIdentifier: EFS_LAST_BACKUP_RECOVERY_POINT_CREATED
  EFSRESOURCESPROTECTEDBYBACKUPPLAN:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: efs-resources-protected-by-backup-plan
      Description: Checks if Amazon Elastic File System (Amazon EFS) File Systems are protected by a backup plan. The rule is NON_COMPLIANT if the EFS File System is not covered by a backup plan.
      InputParameters:
        efsresourcesprotectedbybackupplanresourceTags: !If
          - efsresourcesprotectedbybackupplanresourceTags
          - !Ref 'efsresourcesprotectedbybackupplanresourceTags'
          - !Ref 'AWS::NoValue'
        efsresourcesprotectedbybackupplanresourceId: !If
          - efsresourcesprotectedbybackupplanresourceId
          - !Ref 'efsresourcesprotectedbybackupplanresourceId'
          - !Ref 'AWS::NoValue'
        efsresourcesprotectedbybackupplancrossRegionList: !If
          - efsresourcesprotectedbybackupplancrossRegionList
          - !Ref 'efsresourcesprotectedbybackupplancrossRegionList'
          - !Ref 'AWS::NoValue'
        efsresourcesprotectedbybackupplancrossAccountList: !If
          - efsresourcesprotectedbybackupplancrossAccountList
          - !Ref 'efsresourcesprotectedbybackupplancrossAccountList'
          - !Ref 'AWS::NoValue'
        efsresourcesprotectedbybackupplanmaxRetentionDays: !If
          - efsresourcesprotectedbybackupplanmaxRetentionDays
          - !Ref 'efsresourcesprotectedbybackupplanmaxRetentionDays'
          - !Ref 'AWS::NoValue'
        efsresourcesprotectedbybackupplanminRetentionDays: !If
          - efsresourcesprotectedbybackupplanminRetentionDays
          - !Ref 'efsresourcesprotectedbybackupplanminRetentionDays'
          - !Ref 'AWS::NoValue'
        efsresourcesprotectedbybackupplanbackupVaultLockCheck: !If
          - efsresourcesprotectedbybackupplanbackupVaultLockCheck
          - !Ref 'efsresourcesprotectedbybackupplanbackupVaultLockCheck'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::EFS::FileSystem
      Source:
        Owner: AWS
        SourceIdentifier: EFS_RESOURCES_PROTECTED_BY_BACKUP_PLAN
  EIPATTACHED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: eip-attached
      Description: Checks whether all EIP addresses allocated to a VPC are attached to EC2 instances or in-use ENIs.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::EIP
      Source:
        Owner: AWS
        SourceIdentifier: EIP_ATTACHED
  ELASTICSEARCHENCRYPTEDATREST:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: elasticsearch-encrypted-at-rest
      Description: Checks whether Amazon OpenSearch Service domains have encryption at rest configuration enabled. The rule is NON_COMPLIANT if EncryptionAtRestOptions field is not enabled.
      InputParameters: {}
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: ELASTICSEARCH_ENCRYPTED_AT_REST
  ELASTICSEARCHINVPCONLY:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: elasticsearch-in-vpc-only
      Description: Checks whether Amazon OpenSearch Service domains are in Amazon Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if ElasticSearch Service domain endpoint is public.
      InputParameters: {}
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: ELASTICSEARCH_IN_VPC_ONLY
  ELASTICSEARCHLOGSTOCLOUDWATCH:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: elasticsearch-logs-to-cloudwatch
      Description: >-
        Checks if Amazon OpenSearch Service domains are configured to send logs to Amazon CloudWatch Logs. The rule is COMPLIANT if a log is enabled for an Amazon ES domain. This rule is NON_COMPLIANT if
        logging is not configured.
      InputParameters:
        elasticsearchlogstocloudwatchlogTypes: !If
          - elasticsearchlogstocloudwatchlogTypes
          - !Ref 'elasticsearchlogstocloudwatchlogTypes'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::Elasticsearch::Domain
      Source:
        Owner: AWS
        SourceIdentifier: ELASTICSEARCH_LOGS_TO_CLOUDWATCH
  ELASTICSEARCHNODETONODEENCRYPTIONCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: elasticsearch-node-to-node-encryption-check
      Description: Check that Amazon OpenSearch Service nodes are encrypted end to end. The rule is NON_COMPLIANT if the node-to-node encryption is disabled on the domain.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::Elasticsearch::Domain
      Source:
        Owner: AWS
        SourceIdentifier: ELASTICSEARCH_NODE_TO_NODE_ENCRYPTION_CHECK
  ELBDELETIONPROTECTIONENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: elb-deletion-protection-enabled
      Description: Checks whether an Elastic Load Balancer has deletion protection enabled. The rule is NON_COMPLIANT if deletion_protection.enabled is false.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::ElasticLoadBalancingV2::LoadBalancer
      Source:
        Owner: AWS
        SourceIdentifier: ELB_DELETION_PROTECTION_ENABLED
  ELBLOGGINGENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: elb-logging-enabled
      Description: Checks whether the Application Load Balancers and the Classic Load Balancers have logging enabled.
      InputParameters:
        elbloggingenableds3BucketNames: !If
          - elbloggingenableds3BucketNames
          - !Ref 'elbloggingenableds3BucketNames'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::ElasticLoadBalancing::LoadBalancer
          - AWS::ElasticLoadBalancingV2::LoadBalancer
      Source:
        Owner: AWS
        SourceIdentifier: ELB_LOGGING_ENABLED
  ENCRYPTEDVOLUMES:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: encrypted-volumes
      Description: Checks whether EBS volumes that are in an attached state are encrypted.
      InputParameters:
        encryptedvolumeskmsId: !If
          - encryptedvolumeskmsId
          - !Ref 'encryptedvolumeskmsId'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Volume
      Source:
        Owner: AWS
        SourceIdentifier: ENCRYPTED_VOLUMES
  FMSSHIELDRESOURCEPOLICYCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: fms-shield-resource-policy-check
      Description: >-
        Checks whether an Application Load Balancer, Amazon CloudFront distributions, Elastic Load Balancer or Elastic IP has AWS Shield protection. It also checks if they have web ACL associated for Application
        Load Balancer and Amazon CloudFront distributions.
      InputParameters:
        fmsshieldresourcepolicycheckwebACLId: !If
          - fmsshieldresourcepolicycheckwebACLId
          - !Ref 'fmsshieldresourcepolicycheckwebACLId'
          - !Ref 'AWS::NoValue'
        fmsshieldresourcepolicycheckresourceTypes: !If
          - fmsshieldresourcepolicycheckresourceTypes
          - !Ref 'fmsshieldresourcepolicycheckresourceTypes'
          - !Ref 'AWS::NoValue'
        fmsshieldresourcepolicycheckresourceTags: !If
          - fmsshieldresourcepolicycheckresourceTags
          - !Ref 'fmsshieldresourcepolicycheckresourceTags'
          - !Ref 'AWS::NoValue'
        fmsshieldresourcepolicycheckexcludeResourceTags: !If
          - fmsshieldresourcepolicycheckexcludeResourceTags
          - !Ref 'fmsshieldresourcepolicycheckexcludeResourceTags'
          - !Ref 'AWS::NoValue'
        fmsshieldresourcepolicycheckfmsManagedToken: !If
          - fmsshieldresourcepolicycheckfmsManagedToken
          - !Ref 'fmsshieldresourcepolicycheckfmsManagedToken'
          - !Ref 'AWS::NoValue'
        fmsshieldresourcepolicycheckfmsRemediationEnabled: !If
          - fmsshieldresourcepolicycheckfmsRemediationEnabled
          - !Ref 'fmsshieldresourcepolicycheckfmsRemediationEnabled'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::CloudFront::Distribution
          - AWS::ElasticLoadBalancingV2::LoadBalancer
          - AWS::WAFRegional::WebACL
          - AWS::EC2::EIP
          - AWS::ElasticLoadBalancing::LoadBalancer
          - AWS::ShieldRegional::Protection
          - AWS::Shield::Protection
      Source:
        Owner: AWS
        SourceIdentifier: FMS_SHIELD_RESOURCE_POLICY_CHECK
  FMSWEBACLRESOURCEPOLICYCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: fms-webacl-resource-policy-check
      Description: >-
        Checks whether the web ACL is associated with Application Load Balancers, API Gateway stage or CloudFront distributions. When AWS Firewall Manager creates this rule, the FMS policy owner specifies
        the webACLId in the FMS policy.
      InputParameters:
        fmswebaclresourcepolicycheckwebACLId: !If
          - fmswebaclresourcepolicycheckwebACLId
          - !Ref 'fmswebaclresourcepolicycheckwebACLId'
          - !Ref 'AWS::NoValue'
        fmswebaclresourcepolicycheckresourceTags: !If
          - fmswebaclresourcepolicycheckresourceTags
          - !Ref 'fmswebaclresourcepolicycheckresourceTags'
          - !Ref 'AWS::NoValue'
        fmswebaclresourcepolicycheckexcludeResourceTags: !If
          - fmswebaclresourcepolicycheckexcludeResourceTags
          - !Ref 'fmswebaclresourcepolicycheckexcludeResourceTags'
          - !Ref 'AWS::NoValue'
        fmswebaclresourcepolicycheckfmsManagedToken: !If
          - fmswebaclresourcepolicycheckfmsManagedToken
          - !Ref 'fmswebaclresourcepolicycheckfmsManagedToken'
          - !Ref 'AWS::NoValue'
        fmswebaclresourcepolicycheckfmsRemediationEnabled: !If
          - fmswebaclresourcepolicycheckfmsRemediationEnabled
          - !Ref 'fmswebaclresourcepolicycheckfmsRemediationEnabled'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::CloudFront::Distribution
          - AWS::ApiGateway::Stage
          - AWS::ElasticLoadBalancingV2::LoadBalancer
          - AWS::WAFRegional::WebACL
      Source:
        Owner: AWS
        SourceIdentifier: FMS_WEBACL_RESOURCE_POLICY_CHECK
  FMSWEBACLRULEGROUPASSOCIATIONCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: fms-webacl-rulegroup-association-check
      Description: >-
        Checks whether the RuleGroupId and WafOverrideAction pairs are associated with the WebACL at highest priority. When AWS Firewall manager creates this rule, the FMS policy owner specifies the ruleGroups
        in the policy and can optionally enable remediation.
      InputParameters:
        fmswebaclrulegroupassociationcheckruleGroups: !If
          - fmswebaclrulegroupassociationcheckruleGroups
          - !Ref 'fmswebaclrulegroupassociationcheckruleGroups'
          - !Ref 'AWS::NoValue'
        fmswebaclrulegroupassociationcheckfmsManagedToken: !If
          - fmswebaclrulegroupassociationcheckfmsManagedToken
          - !Ref 'fmswebaclrulegroupassociationcheckfmsManagedToken'
          - !Ref 'AWS::NoValue'
        fmswebaclrulegroupassociationcheckfmsRemediationEnabled: !If
          - fmswebaclrulegroupassociationcheckfmsRemediationEnabled
          - !Ref 'fmswebaclrulegroupassociationcheckfmsRemediationEnabled'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::WAF::WebACL
          - AWS::WAFRegional::WebACL
      Source:
        Owner: AWS
        SourceIdentifier: FMS_WEBACL_RULEGROUP_ASSOCIATION_CHECK
  GUARDDUTYENABLEDCENTRALIZED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: guardduty-enabled-centralized
      Description: Checks whether GuardDuty is enabled. You can optionally verify that the results are centralized in a specific AWS Account.
      InputParameters:
        guarddutyenabledcentralizedCentralMonitoringAccount: !If
          - guarddutyenabledcentralizedCentralMonitoringAccount
          - !Ref 'guarddutyenabledcentralizedCentralMonitoringAccount'
          - !Ref 'AWS::NoValue'
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: GUARDDUTY_ENABLED_CENTRALIZED
  GUARDDUTYNONARCHIVEDFINDINGS:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: guardduty-non-archived-findings
      Description: >-
        Checks whether Amazon GuardDuty has findings that are non archived. The rule is NON_COMPLIANT if Amazon GuardDuty has non archived low/medium/high severity findings older than the specified number
        in the daysLowSev/daysMediumSev/daysHighSev parameter.
      InputParameters:
        guarddutynonarchivedfindingsdaysLowSev: !If
          - guarddutynonarchivedfindingsdaysLowSev
          - !Ref 'guarddutynonarchivedfindingsdaysLowSev'
          - !Ref 'AWS::NoValue'
        guarddutynonarchivedfindingsdaysMediumSev: !If
          - guarddutynonarchivedfindingsdaysMediumSev
          - !Ref 'guarddutynonarchivedfindingsdaysMediumSev'
          - !Ref 'AWS::NoValue'
        guarddutynonarchivedfindingsdaysHighSev: !If
          - guarddutynonarchivedfindingsdaysHighSev
          - !Ref 'guarddutynonarchivedfindingsdaysHighSev'
          - !Ref 'AWS::NoValue'
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: GUARDDUTY_NON_ARCHIVED_FINDINGS
  IAMCUSTOMERPOLICYBLOCKEDKMSACTIONS:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: iam-customer-policy-blocked-kms-actions
      Description: >-
        Checks that the managed AWS Identity and Access Management (IAM) policies that you create do not allow blocked actions on all AWS KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed
        on all AWS KMS keys by the managed IAM policy.
      InputParameters:
        iamcustomerpolicyblockedkmsactionsblockedActionsPatterns: !If
          - iamcustomerpolicyblockedkmsactionsblockedActionsPatterns
          - !Ref 'iamcustomerpolicyblockedkmsactionsblockedActionsPatterns'
          - !Ref 'AWS::NoValue'
        iamcustomerpolicyblockedkmsactionsexcludePermissionBoundaryPolicy: !If
          - iamcustomerpolicyblockedkmsactionsexcludePermissionBoundaryPolicy
          - !Ref 'iamcustomerpolicyblockedkmsactionsexcludePermissionBoundaryPolicy'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::IAM::Policy
      Source:
        Owner: AWS
        SourceIdentifier: IAM_CUSTOMER_POLICY_BLOCKED_KMS_ACTIONS
  IAMGROUPHASUSERSCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: iam-group-has-users-check
      Description: Checks whether IAM groups have at least one IAM user.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::IAM::Group
      Source:
        Owner: AWS
        SourceIdentifier: IAM_GROUP_HAS_USERS_CHECK
  IAMINLINEPOLICYBLOCKEDKMSACTIONS:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: iam-inline-policy-blocked-kms-actions
      Description: >-
        Checks that the inline policies attached to your IAM users, roles, and groups do not allow blocked actions on all AWS Key Management Service (KMS) keys. The rule is NON_COMPLIANT if any blocked
        action is allowed on all KMS keys in an inline policy.
      InputParameters:
        iaminlinepolicyblockedkmsactionsblockedActionsPatterns: !If
          - iaminlinepolicyblockedkmsactionsblockedActionsPatterns
          - !Ref 'iaminlinepolicyblockedkmsactionsblockedActionsPatterns'
          - !Ref 'AWS::NoValue'
        iaminlinepolicyblockedkmsactionsexcludeRoleByManagementAccount: !If
          - iaminlinepolicyblockedkmsactionsexcludeRoleByManagementAccount
          - !Ref 'iaminlinepolicyblockedkmsactionsexcludeRoleByManagementAccount'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::IAM::Group
          - AWS::IAM::Role
          - AWS::IAM::User
      Source:
        Owner: AWS
        SourceIdentifier: IAM_INLINE_POLICY_BLOCKED_KMS_ACTIONS
  IAMNOINLINEPOLICYCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: iam-no-inline-policy-check
      Description: Checks that inline policy feature is not in use. The rule is NON_COMPLIANT if an AWS Identity and Access Management (IAM) user, IAM role or IAM group has any inline policy.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::IAM::User
          - AWS::IAM::Role
          - AWS::IAM::Group
      Source:
        Owner: AWS
        SourceIdentifier: IAM_NO_INLINE_POLICY_CHECK
  IAMPASSWORDPOLICY:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: iam-password-policy
      Description: Checks whether the account password policy for IAM users meets the specified requirements.
      InputParameters:
        iampasswordpolicyRequireUppercaseCharacters: !If
          - iampasswordpolicyRequireUppercaseCharacters
          - !Ref 'iampasswordpolicyRequireUppercaseCharacters'
          - !Ref 'AWS::NoValue'
        iampasswordpolicyRequireLowercaseCharacters: !If
          - iampasswordpolicyRequireLowercaseCharacters
          - !Ref 'iampasswordpolicyRequireLowercaseCharacters'
          - !Ref 'AWS::NoValue'
        iampasswordpolicyRequireSymbols: !If
          - iampasswordpolicyRequireSymbols
          - !Ref 'iampasswordpolicyRequireSymbols'
          - !Ref 'AWS::NoValue'
        iampasswordpolicyRequireNumbers: !If
          - iampasswordpolicyRequireNumbers
          - !Ref 'iampasswordpolicyRequireNumbers'
          - !Ref 'AWS::NoValue'
        iampasswordpolicyMinimumPasswordLength: !If
          - iampasswordpolicyMinimumPasswordLength
          - !Ref 'iampasswordpolicyMinimumPasswordLength'
          - !Ref 'AWS::NoValue'
        iampasswordpolicyPasswordReusePrevention: !If
          - iampasswordpolicyPasswordReusePrevention
          - !Ref 'iampasswordpolicyPasswordReusePrevention'
          - !Ref 'AWS::NoValue'
        iampasswordpolicyMaxPasswordAge: !If
          - iampasswordpolicyMaxPasswordAge
          - !Ref 'iampasswordpolicyMaxPasswordAge'
          - !Ref 'AWS::NoValue'
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: IAM_PASSWORD_POLICY
  IAMPOLICYBLACKLISTEDCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: iam-policy-blacklisted-check
      Description: Checks that none of your IAM users, groups, or roles (excluding exceptionList) have the specified policies attached.
      InputParameters:
        iampolicyblacklistedcheckpolicyArns: !If
          - iampolicyblacklistedcheckpolicyArns
          - !Ref 'iampolicyblacklistedcheckpolicyArns'
          - !Ref 'AWS::NoValue'
        iampolicyblacklistedcheckexceptionList: !If
          - iampolicyblacklistedcheckexceptionList
          - !Ref 'iampolicyblacklistedcheckexceptionList'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::IAM::User
          - AWS::IAM::Group
          - AWS::IAM::Role
      Source:
        Owner: AWS
        SourceIdentifier: IAM_POLICY_BLACKLISTED_CHECK
  IAMPOLICYINUSE:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: iam-policy-in-use
      Description: Checks whether the IAM policy ARN is attached to an IAM user, or a group with one or more IAM users, or an IAM role with one or more trusted entity.
      InputParameters:
        iampolicyinusepolicyARN: !If
          - iampolicyinusepolicyARN
          - !Ref 'iampolicyinusepolicyARN'
          - !Ref 'AWS::NoValue'
        iampolicyinusepolicyUsageType: !If
          - iampolicyinusepolicyUsageType
          - !Ref 'iampolicyinusepolicyUsageType'
          - !Ref 'AWS::NoValue'
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: IAM_POLICY_IN_USE
  IAMPOLICYNOSTATEMENTSWITHADMINACCESS:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: iam-policy-no-statements-with-admin-access
      Description: >-
        Checks whether the default version of AWS Identity and Access Management (IAM) policies do not have administrator access. If any statement has "Effect": "Allow" with "Action": "*" over "Resource":
        "*", the rule is non-compliant.
      InputParameters:
        iampolicynostatementswithadminaccessexcludePermissionBoundaryPolicy: !If
          - iampolicynostatementswithadminaccessexcludePermissionBoundaryPolicy
          - !Ref 'iampolicynostatementswithadminaccessexcludePermissionBoundaryPolicy'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::IAM::Policy
      Source:
        Owner: AWS
        SourceIdentifier: IAM_POLICY_NO_STATEMENTS_WITH_ADMIN_ACCESS
  IAMPOLICYNOSTATEMENTSWITHFULLACCESS:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: iam-policy-no-statements-with-full-access
      Description: >-
        Checks if AWS Identity and Access Management (IAM) policies grant permissions to all actions on individual AWS resources. The rule is NON_COMPLIANT if the managed IAM policy allows full access to
        at least 1 AWS service.
      InputParameters:
        iampolicynostatementswithfullaccessexcludePermissionBoundaryPolicy: !If
          - iampolicynostatementswithfullaccessexcludePermissionBoundaryPolicy
          - !Ref 'iampolicynostatementswithfullaccessexcludePermissionBoundaryPolicy'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::IAM::Policy
      Source:
        Owner: AWS
        SourceIdentifier: IAM_POLICY_NO_STATEMENTS_WITH_FULL_ACCESS
  IAMROLEMANAGEDPOLICYCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: iam-role-managed-policy-check
      Description: >-
        Checks that the AWS Identity and Access Management (IAM) role is attached to all AWS managed policies specified in the list of managed policies. The rule is non-compliant if the IAM role is not
        attached to the AWS managed policy.
      InputParameters:
        iamrolemanagedpolicycheckmanagedPolicyArns: !If
          - iamrolemanagedpolicycheckmanagedPolicyArns
          - !Ref 'iamrolemanagedpolicycheckmanagedPolicyArns'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::IAM::Role
      Source:
        Owner: AWS
        SourceIdentifier: IAM_ROLE_MANAGED_POLICY_CHECK
  IAMROOTACCESSKEYCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: iam-root-access-key-check
      Description: Checks whether the root user access key is available. The rule is compliant if the user access key does not exist.
      InputParameters: {}
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: IAM_ROOT_ACCESS_KEY_CHECK
  IAMUSERGROUPMEMBERSHIPCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: iam-user-group-membership-check
      Description: Checks whether IAM users are members of at least one IAM group.
      InputParameters:
        iamusergroupmembershipcheckgroupNames: !If
          - iamusergroupmembershipcheckgroupNames
          - !Ref 'iamusergroupmembershipcheckgroupNames'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::IAM::User
      Source:
        Owner: AWS
        SourceIdentifier: IAM_USER_GROUP_MEMBERSHIP_CHECK
  IAMUSERMFAENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: iam-user-mfa-enabled
      Description: Checks whether the AWS Identity and Access Management users have multi-factor authentication (MFA) enabled.
      InputParameters: {}
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: IAM_USER_MFA_ENABLED
  IAMUSERNOPOLICIESCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: iam-user-no-policies-check
      Description: Checks that none of your IAM users have policies attached. IAM users must inherit permissions from IAM groups or roles.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::IAM::User
      Source:
        Owner: AWS
        SourceIdentifier: IAM_USER_NO_POLICIES_CHECK
  IAMUSERUNUSEDCREDENTIALSCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: iam-user-unused-credentials-check
      Description: Checks whether your AWS Identity and Access Management (IAM) users have passwords or active access keys that have not been used within the specified number of days you provided.
      InputParameters:
        iamuserunusedcredentialscheckmaxCredentialUsageAge: !If
          - iamuserunusedcredentialscheckmaxCredentialUsageAge
          - !Ref 'iamuserunusedcredentialscheckmaxCredentialUsageAge'
          - !Ref 'AWS::NoValue'
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: IAM_USER_UNUSED_CREDENTIALS_CHECK
  INTERNETGATEWAYAUTHORIZEDVPCONLY:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: internet-gateway-authorized-vpc-only
      Description: Checks that Internet gateways (IGWs) are only attached to an authorized Amazon Virtual Private Cloud (VPCs). The rule is NON_COMPLIANT if IGWs are not attached to an authorized VPC.
      InputParameters:
        internetgatewayauthorizedvpconlyAuthorizedVpcIds: !If
          - internetgatewayauthorizedvpconlyAuthorizedVpcIds
          - !Ref 'internetgatewayauthorizedvpconlyAuthorizedVpcIds'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::InternetGateway
      Source:
        Owner: AWS
        SourceIdentifier: INTERNET_GATEWAY_AUTHORIZED_VPC_ONLY
  KINESISSTREAMENCRYPTED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: kinesis-stream-encrypted
      Description: Checks if Amazon Kinesis streams are encrypted at rest with server-side encryption. The rule is NON_COMPLIANT for a Kinesis stream if 'StreamEncryption' is not present.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::Kinesis::Stream
      Source:
        Owner: AWS
        SourceIdentifier: KINESIS_STREAM_ENCRYPTED
  KMSCMKNOTSCHEDULEDFORDELETION:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: kms-cmk-not-scheduled-for-deletion
      Description: Checks whether customer master keys (CMKs) are not scheduled for deletion in AWS Key Management Service (KMS). The rule is NON_COMPLAINT if CMKs are scheduled for deletion.
      InputParameters:
        kmscmknotscheduledfordeletionkmsKeyIds: !If
          - kmscmknotscheduledfordeletionkmsKeyIds
          - !Ref 'kmscmknotscheduledfordeletionkmsKeyIds'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::KMS::Key
      Source:
        Owner: AWS
        SourceIdentifier: KMS_CMK_NOT_SCHEDULED_FOR_DELETION
  LAMBDACONCURRENCYCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: lambda-concurrency-check
      Description: >-
        Checks whether the AWS Lambda function is configured with function-level concurrent execution limit. The rule is NON_COMPLIANT if the Lambda function is not configured with function-level concurrent
        execution limit.
      InputParameters:
        lambdaconcurrencycheckConcurrencyLimitLow: !If
          - lambdaconcurrencycheckConcurrencyLimitLow
          - !Ref 'lambdaconcurrencycheckConcurrencyLimitLow'
          - !Ref 'AWS::NoValue'
        lambdaconcurrencycheckConcurrencyLimitHigh: !If
          - lambdaconcurrencycheckConcurrencyLimitHigh
          - !Ref 'lambdaconcurrencycheckConcurrencyLimitHigh'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::Lambda::Function
      Source:
        Owner: AWS
        SourceIdentifier: LAMBDA_CONCURRENCY_CHECK
  LAMBDADLQCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: lambda-dlq-check
      Description: Checks whether an AWS Lambda function is configured with a dead-letter queue. The rule is NON_COMPLIANT if the Lambda function is not configured with a dead-letter queue.
      InputParameters:
        lambdadlqcheckdlqArns: !If
          - lambdadlqcheckdlqArns
          - !Ref 'lambdadlqcheckdlqArns'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::Lambda::Function
      Source:
        Owner: AWS
        SourceIdentifier: LAMBDA_DLQ_CHECK
  LAMBDAFUNCTIONPUBLICACCESSPROHIBITED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: lambda-function-public-access-prohibited
      Description: Checks whether the Lambda function policy prohibits public access.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::Lambda::Function
      Source:
        Owner: AWS
        SourceIdentifier: LAMBDA_FUNCTION_PUBLIC_ACCESS_PROHIBITED
  LAMBDAFUNCTIONSETTINGSCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: lambda-function-settings-check
      Description: Checks that the AWS Lambda function settings for runtime, role, timeout, and memory size match the expected values.
      InputParameters:
        lambdafunctionsettingscheckruntime: !If
          - lambdafunctionsettingscheckruntime
          - !Ref 'lambdafunctionsettingscheckruntime'
          - !Ref 'AWS::NoValue'
        lambdafunctionsettingscheckrole: !If
          - lambdafunctionsettingscheckrole
          - !Ref 'lambdafunctionsettingscheckrole'
          - !Ref 'AWS::NoValue'
        lambdafunctionsettingschecktimeout: !If
          - lambdafunctionsettingschecktimeout
          - !Ref 'lambdafunctionsettingschecktimeout'
          - !Ref 'AWS::NoValue'
        lambdafunctionsettingscheckmemorySize: !If
          - lambdafunctionsettingscheckmemorySize
          - !Ref 'lambdafunctionsettingscheckmemorySize'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::Lambda::Function
      Source:
        Owner: AWS
        SourceIdentifier: LAMBDA_FUNCTION_SETTINGS_CHECK
  LAMBDAINSIDEVPC:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: lambda-inside-vpc
      Description: Checks whether an AWS Lambda function is in an Amazon Virtual Private Cloud. The rule is NON_COMPLIANT if the Lambda function is not in a VPC.
      InputParameters:
        lambdainsidevpcsubnetIds: !If
          - lambdainsidevpcsubnetIds
          - !Ref 'lambdainsidevpcsubnetIds'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::Lambda::Function
      Source:
        Owner: AWS
        SourceIdentifier: LAMBDA_INSIDE_VPC
  LAMBDAVPCMULTIAZCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: lambda-vpc-multi-az-check
      Description: >-
        Checks if Lambda has more than 1 availability zone associated. The rule is NON_COMPLIANT if only 1 availability zone is associated with the Lambda or the number of availability zones associated
        is less than number specified in the optional parameter.
      InputParameters:
        lambdavpcmultiazcheckavailabilityZones: !If
          - lambdavpcmultiazcheckavailabilityZones
          - !Ref 'lambdavpcmultiazcheckavailabilityZones'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::Lambda::Function
      Source:
        Owner: AWS
        SourceIdentifier: LAMBDA_VPC_MULTI_AZ_CHECK
  MFAENABLEDFORIAMCONSOLEACCESS:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: mfa-enabled-for-iam-console-access
      Description: Checks whether AWS Multi-Factor Authentication (MFA) is enabled for all AWS Identity and Access Management (IAM) users that use a console password. The rule is compliant if MFA is enabled.
      InputParameters: {}
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: MFA_ENABLED_FOR_IAM_CONSOLE_ACCESS
  NACLNOUNRESTRICTEDSSHRDP:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: nacl-no-unrestricted-ssh-rdp
      Description: >-
        Checks if default ports for SSH tcp/22 or RDP tcp/3389 ingress traffic for network access control lists (NACLs) is unrestricted. The rule is NON_COMPLIANT if a NACL inbound entry allows a source
        CIDR block of '0.0.0.0/0' or '::/0' for ports 22 or 3389.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::NetworkAcl
      Source:
        Owner: AWS
        SourceIdentifier: NACL_NO_UNRESTRICTED_SSH_RDP
  NETFWPOLICYDEFAULTACTIONFRAGMENTPACKETS:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: netfw-policy-default-action-fragment-packets
      Description: >-
        Checks if an AWS Network Firewall policy is configured with a user defined stateless default action for fragmented packets. The rule is NON_COMPLIANT if stateless default action for fragmented packets
        does not match with user defined default action.
      InputParameters:
        netfwpolicydefaultactionfragmentpacketsstatelessFragmentDefaultActions: !If
          - netfwpolicydefaultactionfragmentpacketsstatelessFragmentDefaultActions
          - !Ref 'netfwpolicydefaultactionfragmentpacketsstatelessFragmentDefaultActions'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::NetworkFirewall::FirewallPolicy
      Source:
        Owner: AWS
        SourceIdentifier: NETFW_POLICY_DEFAULT_ACTION_FRAGMENT_PACKETS
  NETFWPOLICYDEFAULTACTIONFULLPACKETS:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: netfw-policy-default-action-full-packets
      Description: >-
        Checks if an AWS Network Firewall policy is configured with a user defined default stateless action for full packets. This rule is NON_COMPLIANT if default stateless action for full packets does
        not match with user defined default stateless action.
      InputParameters:
        netfwpolicydefaultactionfullpacketsstatelessDefaultActions: !If
          - netfwpolicydefaultactionfullpacketsstatelessDefaultActions
          - !Ref 'netfwpolicydefaultactionfullpacketsstatelessDefaultActions'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::NetworkFirewall::FirewallPolicy
      Source:
        Owner: AWS
        SourceIdentifier: NETFW_POLICY_DEFAULT_ACTION_FULL_PACKETS
  NETFWPOLICYRULEGROUPASSOCIATED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: netfw-policy-rule-group-associated
      Description: >-
        Check AWS Network Firewall policy is associated with stateful OR stateless rule groups. This rule is NON_COMPLIANT if no stateful or stateless rule groups are associated with the Network Firewall
        policy else COMPLIANT if any one of the rule group exists.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::NetworkFirewall::FirewallPolicy
      Source:
        Owner: AWS
        SourceIdentifier: NETFW_POLICY_RULE_GROUP_ASSOCIATED
  NETFWSTATELESSRULEGROUPNOTEMPTY:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: netfw-stateless-rule-group-not-empty
      Description: Checks if a Stateless Network Firewall Rule Group contains rules. The rule is NON_COMPLIANT if there are no rules in a Stateless Network Firewall Rule Group.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::NetworkFirewall::RuleGroup
      Source:
        Owner: AWS
        SourceIdentifier: NETFW_STATELESS_RULE_GROUP_NOT_EMPTY
  NLBCROSSZONELOADBALANCINGENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: nlb-cross-zone-load-balancing-enabled
      Description: Checks if cross-zone load balancing is enabled on Network Load Balancers (NLBs). The rule is NON_COMPLIANT if cross-zone load balancing is not enabled for an NLB.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::ElasticLoadBalancingV2::LoadBalancer
      Source:
        Owner: AWS
        SourceIdentifier: NLB_CROSS_ZONE_LOAD_BALANCING_ENABLED
  NOUNRESTRICTEDROUTETOIGW:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: no-unrestricted-route-to-igw
      Description: >-
        Checks if there are public routes in the route table to an Internet Gateway (IGW). The rule is NON_COMPLIANT if a route to an IGW has a destination CIDR block of '0.0.0.0/0' or '::/0' or if a destination
        CIDR block does not match the rule parameter.
      InputParameters:
        nounrestrictedroutetoigwrouteTableIds: !If
          - nounrestrictedroutetoigwrouteTableIds
          - !Ref 'nounrestrictedroutetoigwrouteTableIds'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::RouteTable
      Source:
        Owner: AWS
        SourceIdentifier: NO_UNRESTRICTED_ROUTE_TO_IGW
  OPENSEARCHACCESSCONTROLENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: opensearch-access-control-enabled
      Description: Checks if Amazon OpenSearch Service domains have fine-grained access control enabled. The rule is NON_COMPLIANT if AdvancedSecurityOptions is not enabled for the OpenSearch Service domain.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::OpenSearch::Domain
      Source:
        Owner: AWS
        SourceIdentifier: OPENSEARCH_ACCESS_CONTROL_ENABLED
  OPENSEARCHAUDITLOGGINGENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: opensearch-audit-logging-enabled
      Description: Checks if Amazon OpenSearch Service domains have audit logging enabled. The rule is NON_COMPLIANT if an OpenSearch Service domain does not have audit logging enabled.
      InputParameters:
        opensearchauditloggingenabledcloudWatchLogsLogGroupArnList: !If
          - opensearchauditloggingenabledcloudWatchLogsLogGroupArnList
          - !Ref 'opensearchauditloggingenabledcloudWatchLogsLogGroupArnList'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::OpenSearch::Domain
      Source:
        Owner: AWS
        SourceIdentifier: OPENSEARCH_AUDIT_LOGGING_ENABLED
  OPENSEARCHDATANODEFAULTTOLERANCE:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: opensearch-data-node-fault-tolerance
      Description: >-
        Checks if Amazon OpenSearch Service domains are configured with at least three data nodes and zoneAwarenessEnabled is true. The rule is NON_COMPLIANT for an OpenSearch domain if 'instanceCount'
        is less than 3 or 'zoneAwarenessEnabled' is set to 'false'.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::OpenSearch::Domain
      Source:
        Owner: AWS
        SourceIdentifier: OPENSEARCH_DATA_NODE_FAULT_TOLERANCE
  OPENSEARCHENCRYPTEDATREST:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: opensearch-encrypted-at-rest
      Description: Checks if Amazon OpenSearch Service domains have encryption at rest configuration enabled. The rule is NON_COMPLIANT if EncryptionAtRestOptions field is not enabled.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::OpenSearch::Domain
      Source:
        Owner: AWS
        SourceIdentifier: OPENSEARCH_ENCRYPTED_AT_REST
  OPENSEARCHHTTPSREQUIRED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: opensearch-https-required
      Description: >-
        Checks whether connections to OpenSearch domains are using HTTPS. The rule is NON_COMPLIANT if the Amazon OpenSearch domain 'EnforceHTTPS' is not 'true' or is 'true' and 'TLSSecurityPolicy' is not
        in 'tlsPolicies'.
      InputParameters:
        opensearchhttpsrequiredtlsPolicies: !If
          - opensearchhttpsrequiredtlsPolicies
          - !Ref 'opensearchhttpsrequiredtlsPolicies'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::OpenSearch::Domain
      Source:
        Owner: AWS
        SourceIdentifier: OPENSEARCH_HTTPS_REQUIRED
  OPENSEARCHINVPCONLY:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: opensearch-in-vpc-only
      Description: Checks if Amazon OpenSearch Service domains are in an Amazon Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if an OpenSearch Service domain endpoint is public.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::OpenSearch::Domain
      Source:
        Owner: AWS
        SourceIdentifier: OPENSEARCH_IN_VPC_ONLY
  OPENSEARCHLOGSTOCLOUDWATCH:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: opensearch-logs-to-cloudwatch
      Description: Checks if Amazon OpenSearch Service domains are configured to send logs to Amazon CloudWatch Logs. The rule is NON_COMPLIANT if logging is not configured.
      InputParameters:
        opensearchlogstocloudwatchlogTypes: !If
          - opensearchlogstocloudwatchlogTypes
          - !Ref 'opensearchlogstocloudwatchlogTypes'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::OpenSearch::Domain
      Source:
        Owner: AWS
        SourceIdentifier: OPENSEARCH_LOGS_TO_CLOUDWATCH
  OPENSEARCHNODETONODEENCRYPTIONCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: opensearch-node-to-node-encryption-check
      Description: Check that Amazon OpenSearch Service nodes are encrypted end to end. The rule is NON_COMPLIANT if the node-to-node encryption is not enabled on the domain
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::OpenSearch::Domain
      Source:
        Owner: AWS
        SourceIdentifier: OPENSEARCH_NODE_TO_NODE_ENCRYPTION_CHECK
  RDSAUTOMATICMINORVERSIONUPGRADEENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: rds-automatic-minor-version-upgrade-enabled
      Description: >-
        Checks if Amazon Relational Database Service (RDS) database instances are configured for automatic minor version upgrades. The rule is NON_COMPLIANT if the value of 'autoMinorVersionUpgrade' is
        false.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBInstance
      Source:
        Owner: AWS
        SourceIdentifier: RDS_AUTOMATIC_MINOR_VERSION_UPGRADE_ENABLED
  RDSCLUSTERDEFAULTADMINCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: rds-cluster-default-admin-check
      Description: >-
        Checks if an Amazon Relational Database Service (Amazon RDS) database cluster has changed the admin username from its default value. The rule is NON_COMPLIANT if the admin username is set to the
        default value.
      InputParameters:
        rdsclusterdefaultadmincheckvalidAdminUserNames: !If
          - rdsclusterdefaultadmincheckvalidAdminUserNames
          - !Ref 'rdsclusterdefaultadmincheckvalidAdminUserNames'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBCluster
      Source:
        Owner: AWS
        SourceIdentifier: RDS_CLUSTER_DEFAULT_ADMIN_CHECK
  RDSCLUSTERDELETIONPROTECTIONENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: rds-cluster-deletion-protection-enabled
      Description: Checks if an Amazon Relational Database Service (Amazon RDS) cluster has deletion protection enabled. This rule is NON_COMPLIANT if an RDS cluster does not have deletion protection enabled.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBCluster
      Source:
        Owner: AWS
        SourceIdentifier: RDS_CLUSTER_DELETION_PROTECTION_ENABLED
  RDSCLUSTERIAMAUTHENTICATIONENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: rds-cluster-iam-authentication-enabled
      Description: Checks if an Amazon RDS Cluster has AWS Identity and Access Management (IAM) authentication enabled. The rule is NON_COMPLIANT if an RDS Cluster does not have IAM authentication enabled.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBCluster
      Source:
        Owner: AWS
        SourceIdentifier: RDS_CLUSTER_IAM_AUTHENTICATION_ENABLED
  RDSCLUSTERMULTIAZENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: rds-cluster-multi-az-enabled
      Description: >-
        Checks if Multi-AZ replication is enabled on Amazon Aurora and Hermes clusters managed by Amazon Relational Database Service (Amazon RDS). This rule is NON_COMPLIANT if an Amazon RDS instance is
        not configured with Multi-AZ.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBCluster
      Source:
        Owner: AWS
        SourceIdentifier: RDS_CLUSTER_MULTI_AZ_ENABLED
  RDSDBSECURITYGROUPNOTALLOWED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: rds-db-security-group-not-allowed
      Description: >-
        Checks if there are any Amazon Relational Database Service (RDS) DB security groups that are not the default DB security group. The rule is NON_COMPLIANT is there are any DB security groups that
        are not the default DB security group.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBSecurityGroup
      Source:
        Owner: AWS
        SourceIdentifier: RDS_DB_SECURITY_GROUP_NOT_ALLOWED
  RDSENHANCEDMONITORINGENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: rds-enhanced-monitoring-enabled
      Description: Checks whether enhanced monitoring is enabled for Amazon Relational Database Service (Amazon RDS) instances.
      InputParameters:
        rdsenhancedmonitoringenabledmonitoringInterval: !If
          - rdsenhancedmonitoringenabledmonitoringInterval
          - !Ref 'rdsenhancedmonitoringenabledmonitoringInterval'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBInstance
      Source:
        Owner: AWS
        SourceIdentifier: RDS_ENHANCED_MONITORING_ENABLED
  RDSINBACKUPPLAN:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: rds-in-backup-plan
      Description: Checks whether Amazon RDS database is present in back plans of AWS Backup. The rule is NON_COMPLIANT if Amazon RDS databases are not included in any AWS Backup plan.
      InputParameters: {}
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: RDS_IN_BACKUP_PLAN
  RDSINSTANCEDEFAULTADMINCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: rds-instance-default-admin-check
      Description: >-
        Checks if an Amazon Relational Database Service (Amazon RDS) database has changed the admin username from its default value. This rule will only run on RDS database instances. The rule is NON_COMPLIANT
        if the admin username is set to the default value.
      InputParameters:
        rdsinstancedefaultadmincheckvalidAdminUserNames: !If
          - rdsinstancedefaultadmincheckvalidAdminUserNames
          - !Ref 'rdsinstancedefaultadmincheckvalidAdminUserNames'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBInstance
      Source:
        Owner: AWS
        SourceIdentifier: RDS_INSTANCE_DEFAULT_ADMIN_CHECK
  RDSINSTANCEDELETIONPROTECTIONENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: rds-instance-deletion-protection-enabled
      Description: >-
        Checks if an Amazon Relational Database Service (Amazon RDS) instance has deletion protection enabled. This rule is NON_COMPLIANT if an Amazon RDS instance does not have deletion protection enabled
        i.e deletionProtection is set to false.
      InputParameters:
        rdsinstancedeletionprotectionenableddatabaseEngines: !If
          - rdsinstancedeletionprotectionenableddatabaseEngines
          - !Ref 'rdsinstancedeletionprotectionenableddatabaseEngines'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBInstance
      Source:
        Owner: AWS
        SourceIdentifier: RDS_INSTANCE_DELETION_PROTECTION_ENABLED
  RDSINSTANCEIAMAUTHENTICATIONENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: rds-instance-iam-authentication-enabled
      Description: >-
        Checks if an Amazon Relational Database Service (Amazon RDS) instance has AWS Identity and Access Management (IAM) authentication enabled. This rule is NON_COMPLIANT if an Amazon RDS instance does
        not have AWS IAM authentication enabled.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBInstance
      Source:
        Owner: AWS
        SourceIdentifier: RDS_INSTANCE_IAM_AUTHENTICATION_ENABLED
  RDSINSTANCEPUBLICACCESSCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: rds-instance-public-access-check
      Description: >-
        Checks whether the Amazon Relational Database Service (RDS) instances are not publicly accessible. The rule is non-compliant if the publiclyAccessible field is true in the instance configuration
        item.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBInstance
      Source:
        Owner: AWS
        SourceIdentifier: RDS_INSTANCE_PUBLIC_ACCESS_CHECK
  RDSLASTBACKUPRECOVERYPOINTCREATED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: rds-last-backup-recovery-point-created
      Description: >-
        Checks if a recovery point was created for Amazon Relational Database Service (Amazon RDS). The rule is NON_COMPLIANT if the Amazon RDS instance does not have a corresponding recovery point created
        within the specified time period.
      InputParameters:
        rdslastbackuprecoverypointcreatedresourceTags: !If
          - rdslastbackuprecoverypointcreatedresourceTags
          - !Ref 'rdslastbackuprecoverypointcreatedresourceTags'
          - !Ref 'AWS::NoValue'
        rdslastbackuprecoverypointcreatedresourceId: !If
          - rdslastbackuprecoverypointcreatedresourceId
          - !Ref 'rdslastbackuprecoverypointcreatedresourceId'
          - !Ref 'AWS::NoValue'
        rdslastbackuprecoverypointcreatedrecoveryPointAgeValue: !If
          - rdslastbackuprecoverypointcreatedrecoveryPointAgeValue
          - !Ref 'rdslastbackuprecoverypointcreatedrecoveryPointAgeValue'
          - !Ref 'AWS::NoValue'
        rdslastbackuprecoverypointcreatedrecoveryPointAgeUnit: !If
          - rdslastbackuprecoverypointcreatedrecoveryPointAgeUnit
          - !Ref 'rdslastbackuprecoverypointcreatedrecoveryPointAgeUnit'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBInstance
      Source:
        Owner: AWS
        SourceIdentifier: RDS_LAST_BACKUP_RECOVERY_POINT_CREATED
  RDSLOGGINGENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: rds-logging-enabled
      Description: Checks that respective logs of Amazon Relational Database Service (Amazon RDS) are enabled. The rule is NON_COMPLIANT if any log types are not enabled.
      InputParameters:
        rdsloggingenabledadditionalLogs: !If
          - rdsloggingenabledadditionalLogs
          - !Ref 'rdsloggingenabledadditionalLogs'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBInstance
      Source:
        Owner: AWS
        SourceIdentifier: RDS_LOGGING_ENABLED
  RDSMULTIAZSUPPORT:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: rds-multi-az-support
      Description: Checks whether high availability is enabled for your RDS DB instances.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBInstance
      Source:
        Owner: AWS
        SourceIdentifier: RDS_MULTI_AZ_SUPPORT
  RDSRESOURCESPROTECTEDBYBACKUPPLAN:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: rds-resources-protected-by-backup-plan
      Description: Checks if Amazon Relational Database Service (Amazon RDS) instances are protected by a backup plan. The rule is NON_COMPLIANT if the Amazon RDS Database instance is not covered by a backup
        plan.
      InputParameters:
        rdsresourcesprotectedbybackupplanresourceTags: !If
          - rdsresourcesprotectedbybackupplanresourceTags
          - !Ref 'rdsresourcesprotectedbybackupplanresourceTags'
          - !Ref 'AWS::NoValue'
        rdsresourcesprotectedbybackupplanresourceId: !If
          - rdsresourcesprotectedbybackupplanresourceId
          - !Ref 'rdsresourcesprotectedbybackupplanresourceId'
          - !Ref 'AWS::NoValue'
        rdsresourcesprotectedbybackupplancrossRegionList: !If
          - rdsresourcesprotectedbybackupplancrossRegionList
          - !Ref 'rdsresourcesprotectedbybackupplancrossRegionList'
          - !Ref 'AWS::NoValue'
        rdsresourcesprotectedbybackupplancrossAccountList: !If
          - rdsresourcesprotectedbybackupplancrossAccountList
          - !Ref 'rdsresourcesprotectedbybackupplancrossAccountList'
          - !Ref 'AWS::NoValue'
        rdsresourcesprotectedbybackupplanmaxRetentionDays: !If
          - rdsresourcesprotectedbybackupplanmaxRetentionDays
          - !Ref 'rdsresourcesprotectedbybackupplanmaxRetentionDays'
          - !Ref 'AWS::NoValue'
        rdsresourcesprotectedbybackupplanminRetentionDays: !If
          - rdsresourcesprotectedbybackupplanminRetentionDays
          - !Ref 'rdsresourcesprotectedbybackupplanminRetentionDays'
          - !Ref 'AWS::NoValue'
        rdsresourcesprotectedbybackupplanbackupVaultLockCheck: !If
          - rdsresourcesprotectedbybackupplanbackupVaultLockCheck
          - !Ref 'rdsresourcesprotectedbybackupplanbackupVaultLockCheck'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBInstance
      Source:
        Owner: AWS
        SourceIdentifier: RDS_RESOURCES_PROTECTED_BY_BACKUP_PLAN
  RDSSNAPSHOTENCRYPTED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: rds-snapshot-encrypted
      Description: Checks whether Amazon Relational Database Service (Amazon RDS) DB snapshots are encrypted. The rule is NON_COMPLIANT, if the Amazon RDS DB snapshots are not encrypted.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBSnapshot
          - AWS::RDS::DBClusterSnapshot
      Source:
        Owner: AWS
        SourceIdentifier: RDS_SNAPSHOT_ENCRYPTED
  RDSSNAPSHOTSPUBLICPROHIBITED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: rds-snapshots-public-prohibited
      Description: Checks if Amazon Relational Database Service (Amazon RDS) snapshots are public. The rule is non-compliant if any existing and new Amazon RDS snapshots are public.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBSnapshot
          - AWS::RDS::DBClusterSnapshot
      Source:
        Owner: AWS
        SourceIdentifier: RDS_SNAPSHOTS_PUBLIC_PROHIBITED
  RDSSTORAGEENCRYPTED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: rds-storage-encrypted
      Description: Checks whether storage encryption is enabled for your RDS DB instances.
      InputParameters:
        rdsstorageencryptedkmsKeyId: !If
          - rdsstorageencryptedkmsKeyId
          - !Ref 'rdsstorageencryptedkmsKeyId'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBInstance
      Source:
        Owner: AWS
        SourceIdentifier: RDS_STORAGE_ENCRYPTED
  REQUIREDTAGS:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: required-tags
      Description: Checks whether your resources have the tags that you specify.
      InputParameters:
        requiredtagstag1Key: !If
          - requiredtagstag1Key
          - !Ref 'requiredtagstag1Key'
          - !Ref 'AWS::NoValue'
        requiredtagstag1Value: !If
          - requiredtagstag1Value
          - !Ref 'requiredtagstag1Value'
          - !Ref 'AWS::NoValue'
        requiredtagstag2Key: !If
          - requiredtagstag2Key
          - !Ref 'requiredtagstag2Key'
          - !Ref 'AWS::NoValue'
        requiredtagstag2Value: !If
          - requiredtagstag2Value
          - !Ref 'requiredtagstag2Value'
          - !Ref 'AWS::NoValue'
        requiredtagstag3Key: !If
          - requiredtagstag3Key
          - !Ref 'requiredtagstag3Key'
          - !Ref 'AWS::NoValue'
        requiredtagstag3Value: !If
          - requiredtagstag3Value
          - !Ref 'requiredtagstag3Value'
          - !Ref 'AWS::NoValue'
        requiredtagstag4Key: !If
          - requiredtagstag4Key
          - !Ref 'requiredtagstag4Key'
          - !Ref 'AWS::NoValue'
        requiredtagstag4Value: !If
          - requiredtagstag4Value
          - !Ref 'requiredtagstag4Value'
          - !Ref 'AWS::NoValue'
        requiredtagstag5Key: !If
          - requiredtagstag5Key
          - !Ref 'requiredtagstag5Key'
          - !Ref 'AWS::NoValue'
        requiredtagstag5Value: !If
          - requiredtagstag5Value
          - !Ref 'requiredtagstag5Value'
          - !Ref 'AWS::NoValue'
        requiredtagstag6Key: !If
          - requiredtagstag6Key
          - !Ref 'requiredtagstag6Key'
          - !Ref 'AWS::NoValue'
        requiredtagstag6Value: !If
          - requiredtagstag6Value
          - !Ref 'requiredtagstag6Value'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::ACM::Certificate
          - AWS::AutoScaling::AutoScalingGroup
          - AWS::CloudFormation::Stack
          - AWS::CodeBuild::Project
          - AWS::DynamoDB::Table
          - AWS::EC2::CustomerGateway
          - AWS::EC2::Instance
          - AWS::EC2::InternetGateway
          - AWS::EC2::NetworkAcl
          - AWS::EC2::NetworkInterface
          - AWS::EC2::RouteTable
          - AWS::EC2::SecurityGroup
          - AWS::EC2::Subnet
          - AWS::EC2::Volume
          - AWS::EC2::VPC
          - AWS::EC2::VPNConnection
          - AWS::EC2::VPNGateway
          - AWS::ElasticLoadBalancing::LoadBalancer
          - AWS::ElasticLoadBalancingV2::LoadBalancer
          - AWS::RDS::DBInstance
          - AWS::RDS::DBSecurityGroup
          - AWS::RDS::DBSnapshot
          - AWS::RDS::DBSubnetGroup
          - AWS::RDS::EventSubscription
          - AWS::Redshift::Cluster
          - AWS::Redshift::ClusterParameterGroup
          - AWS::Redshift::ClusterSecurityGroup
          - AWS::Redshift::ClusterSnapshot
          - AWS::Redshift::ClusterSubnetGroup
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: REQUIRED_TAGS
  ROOTACCOUNTMFAENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: root-account-mfa-enabled
      Description: Checks whether the root user of your AWS account requires multi-factor authentication for console sign-in.
      InputParameters: {}
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: ROOT_ACCOUNT_MFA_ENABLED
  S3ACCOUNTLEVELPUBLICACCESSBLOCKS:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: s3-account-level-public-access-blocks
      Description: Checks whether the required public access block settings are configured from account level. The rule is NON_COMPLIANT when the public access block settings are not configured from account
        level.
      InputParameters:
        s3accountlevelpublicaccessblocksIgnorePublicAcls: !If
          - s3accountlevelpublicaccessblocksIgnorePublicAcls
          - !Ref 's3accountlevelpublicaccessblocksIgnorePublicAcls'
          - !Ref 'AWS::NoValue'
        s3accountlevelpublicaccessblocksBlockPublicPolicy: !If
          - s3accountlevelpublicaccessblocksBlockPublicPolicy
          - !Ref 's3accountlevelpublicaccessblocksBlockPublicPolicy'
          - !Ref 'AWS::NoValue'
        s3accountlevelpublicaccessblocksBlockPublicAcls: !If
          - s3accountlevelpublicaccessblocksBlockPublicAcls
          - !Ref 's3accountlevelpublicaccessblocksBlockPublicAcls'
          - !Ref 'AWS::NoValue'
        s3accountlevelpublicaccessblocksRestrictPublicBuckets: !If
          - s3accountlevelpublicaccessblocksRestrictPublicBuckets
          - !Ref 's3accountlevelpublicaccessblocksRestrictPublicBuckets'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::AccountPublicAccessBlock
      Source:
        Owner: AWS
        SourceIdentifier: S3_ACCOUNT_LEVEL_PUBLIC_ACCESS_BLOCKS
  S3ACCOUNTLEVELPUBLICACCESSBLOCKSPERIODIC:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: s3-account-level-public-access-blocks-periodic
      Description: Checks if the required public access block settings are configured from account level.
      InputParameters:
        s3accountlevelpublicaccessblocksperiodicIgnorePublicAcls: !If
          - s3accountlevelpublicaccessblocksperiodicIgnorePublicAcls
          - !Ref 's3accountlevelpublicaccessblocksperiodicIgnorePublicAcls'
          - !Ref 'AWS::NoValue'
        s3accountlevelpublicaccessblocksperiodicBlockPublicPolicy: !If
          - s3accountlevelpublicaccessblocksperiodicBlockPublicPolicy
          - !Ref 's3accountlevelpublicaccessblocksperiodicBlockPublicPolicy'
          - !Ref 'AWS::NoValue'
        s3accountlevelpublicaccessblocksperiodicBlockPublicAcls: !If
          - s3accountlevelpublicaccessblocksperiodicBlockPublicAcls
          - !Ref 's3accountlevelpublicaccessblocksperiodicBlockPublicAcls'
          - !Ref 'AWS::NoValue'
        s3accountlevelpublicaccessblocksperiodicRestrictPublicBuckets: !If
          - s3accountlevelpublicaccessblocksperiodicRestrictPublicBuckets
          - !Ref 's3accountlevelpublicaccessblocksperiodicRestrictPublicBuckets'
          - !Ref 'AWS::NoValue'
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: S3_ACCOUNT_LEVEL_PUBLIC_ACCESS_BLOCKS_PERIODIC
  S3BUCKETACLPROHIBITED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: s3-bucket-acl-prohibited
      Description: >-
        Checks if Amazon Simple Storage Service (Amazon S3) Buckets allow user permissions through access control lists (ACLs). The rule is NON_COMPLIANT if ACLs are configured for user access in Amazon
        S3 Buckets.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_ACL_PROHIBITED
  S3BUCKETPOLICYGRANTEECHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: s3-bucket-policy-grantee-check
      Description: >-
        Checks that the access granted by the Amazon S3 bucket is restricted to any of the AWS principals, federated users, service principals, IP addresses, or VPCs that you provide. The rule is COMPLIANT
        if a bucket policy is not present.
      InputParameters:
        s3bucketpolicygranteecheckawsPrincipals: !If
          - s3bucketpolicygranteecheckawsPrincipals
          - !Ref 's3bucketpolicygranteecheckawsPrincipals'
          - !Ref 'AWS::NoValue'
        s3bucketpolicygranteecheckservicePrincipals: !If
          - s3bucketpolicygranteecheckservicePrincipals
          - !Ref 's3bucketpolicygranteecheckservicePrincipals'
          - !Ref 'AWS::NoValue'
        s3bucketpolicygranteecheckfederatedUsers: !If
          - s3bucketpolicygranteecheckfederatedUsers
          - !Ref 's3bucketpolicygranteecheckfederatedUsers'
          - !Ref 'AWS::NoValue'
        s3bucketpolicygranteecheckipAddresses: !If
          - s3bucketpolicygranteecheckipAddresses
          - !Ref 's3bucketpolicygranteecheckipAddresses'
          - !Ref 'AWS::NoValue'
        s3bucketpolicygranteecheckvpcIds: !If
          - s3bucketpolicygranteecheckvpcIds
          - !Ref 's3bucketpolicygranteecheckvpcIds'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_POLICY_GRANTEE_CHECK
  S3BUCKETPOLICYNOTMOREPERMISSIVE:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: s3-bucket-policy-not-more-permissive
      Description: Verifies that your Amazon S3 bucket policies do not allow other inter-account permissions than the control S3 bucket policy that you provide.
      InputParameters:
        s3bucketpolicynotmorepermissivecontrolPolicy: !If
          - s3bucketpolicynotmorepermissivecontrolPolicy
          - !Ref 's3bucketpolicynotmorepermissivecontrolPolicy'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_POLICY_NOT_MORE_PERMISSIVE
  S3BUCKETPUBLICREADPROHIBITED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: s3-bucket-public-read-prohibited
      Description: Checks that your Amazon S3 buckets do not allow public read access. The rule checks the Block Public Access settings, the bucket policy, and the bucket access control list (ACL).
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_PUBLIC_READ_PROHIBITED
  S3BUCKETPUBLICWRITEPROHIBITED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: s3-bucket-public-write-prohibited
      Description: Checks that your Amazon S3 buckets do not allow public write access. The rule checks the Block Public Access settings, the bucket policy, and the bucket access control list (ACL).
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_PUBLIC_WRITE_PROHIBITED
  S3BUCKETREPLICATIONENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: s3-bucket-replication-enabled
      Description: Checks if your Amazon S3 buckets have replication rules enabled. The rule is NON_COMPLIANT if an S3 bucket does not have a replication rule or has a replication rule that is not enabled.
      InputParameters:
        s3bucketreplicationenabledReplicationType: !If
          - s3bucketreplicationenabledReplicationType
          - !Ref 's3bucketreplicationenabledReplicationType'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_REPLICATION_ENABLED
  S3BUCKETSERVERSIDEENCRYPTIONENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: s3-bucket-server-side-encryption-enabled
      Description: Checks that your Amazon S3 bucket either has S3 default encryption enabled or that the S3 bucket policy explicitly denies put-object requests without server side encryption.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED
  S3BUCKETSSLREQUESTSONLY:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: s3-bucket-ssl-requests-only
      Description: Checks whether S3 buckets have policies that require requests to use Secure Socket Layer (SSL).
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_SSL_REQUESTS_ONLY
  S3BUCKETVERSIONINGENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: s3-bucket-versioning-enabled
      Description: Checks whether versioning is enabled for your S3 buckets.
      InputParameters:
        s3bucketversioningenabledisMfaDeleteEnabled: !If
          - s3bucketversioningenabledisMfaDeleteEnabled
          - !Ref 's3bucketversioningenabledisMfaDeleteEnabled'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_VERSIONING_ENABLED
  S3DEFAULTENCRYPTIONKMS:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: s3-default-encryption-kms
      Description: Checks whether the Amazon S3 buckets are encrypted with AWS Key Management Service(AWS KMS). The rule is NON_COMPLIANT if the Amazon S3 bucket is not encrypted with AWS KMS key.
      InputParameters:
        s3defaultencryptionkmskmsKeyArns: !If
          - s3defaultencryptionkmskmsKeyArns
          - !Ref 's3defaultencryptionkmskmsKeyArns'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_DEFAULT_ENCRYPTION_KMS
  S3EVENTNOTIFICATIONSENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: s3-event-notifications-enabled
      Description: >-
        Checks if Amazon S3 Events Notifications are enabled on an S3 bucket. The rule is NON_COMPLIANT if S3 Events Notifications are not set on a bucket, or if the event type or destination do not match
        the eventTypes and destinationArn parameters.
      InputParameters:
        s3eventnotificationsenableddestinationArn: !If
          - s3eventnotificationsenableddestinationArn
          - !Ref 's3eventnotificationsenableddestinationArn'
          - !Ref 'AWS::NoValue'
        s3eventnotificationsenabledeventTypes: !If
          - s3eventnotificationsenabledeventTypes
          - !Ref 's3eventnotificationsenabledeventTypes'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_EVENT_NOTIFICATIONS_ENABLED
  S3LASTBACKUPRECOVERYPOINTCREATED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: s3-last-backup-recovery-point-created
      Description: >-
        Checks if a recovery point was created for Amazon Simple Storage Service (Amazon S3). The rule is NON_COMPLIANT if the Amazon S3 bucket does not have a corresponding recovery point created within
        the specified time period.
      InputParameters:
        s3lastbackuprecoverypointcreatedresourceTags: !If
          - s3lastbackuprecoverypointcreatedresourceTags
          - !Ref 's3lastbackuprecoverypointcreatedresourceTags'
          - !Ref 'AWS::NoValue'
        s3lastbackuprecoverypointcreatedresourceId: !If
          - s3lastbackuprecoverypointcreatedresourceId
          - !Ref 's3lastbackuprecoverypointcreatedresourceId'
          - !Ref 'AWS::NoValue'
        s3lastbackuprecoverypointcreatedrecoveryPointAgeValue: !If
          - s3lastbackuprecoverypointcreatedrecoveryPointAgeValue
          - !Ref 's3lastbackuprecoverypointcreatedrecoveryPointAgeValue'
          - !Ref 'AWS::NoValue'
        s3lastbackuprecoverypointcreatedrecoveryPointAgeUnit: !If
          - s3lastbackuprecoverypointcreatedrecoveryPointAgeUnit
          - !Ref 's3lastbackuprecoverypointcreatedrecoveryPointAgeUnit'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_LAST_BACKUP_RECOVERY_POINT_CREATED
  S3LIFECYCLEPOLICYCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: s3-lifecycle-policy-check
      Description: >-
        Checks if a lifecycle rule is configured for an Amazon Simple Storage Service (Amazon S3) bucket. The rule is NON_COMPLIANT if there is no active lifecycle configuration rules or the configuration
        does not match with the parameter values.
      InputParameters:
        s3lifecyclepolicychecktargetTransitionDays: !If
          - s3lifecyclepolicychecktargetTransitionDays
          - !Ref 's3lifecyclepolicychecktargetTransitionDays'
          - !Ref 'AWS::NoValue'
        s3lifecyclepolicychecktargetExpirationDays: !If
          - s3lifecyclepolicychecktargetExpirationDays
          - !Ref 's3lifecyclepolicychecktargetExpirationDays'
          - !Ref 'AWS::NoValue'
        s3lifecyclepolicychecktargetTransitionStorageClass: !If
          - s3lifecyclepolicychecktargetTransitionStorageClass
          - !Ref 's3lifecyclepolicychecktargetTransitionStorageClass'
          - !Ref 'AWS::NoValue'
        s3lifecyclepolicychecktargetPrefix: !If
          - s3lifecyclepolicychecktargetPrefix
          - !Ref 's3lifecyclepolicychecktargetPrefix'
          - !Ref 'AWS::NoValue'
        s3lifecyclepolicycheckbucketNames: !If
          - s3lifecyclepolicycheckbucketNames
          - !Ref 's3lifecyclepolicycheckbucketNames'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_LIFECYCLE_POLICY_CHECK
  S3RESOURCESPROTECTEDBYBACKUPPLAN:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: s3-resources-protected-by-backup-plan
      Description: Checks if Amazon Simple Storage Service (Amazon S3) buckets are protected by a backup plan. The rule is NON_COMPLIANT if the Amazon S3 bucket is not covered by a backup plan.
      InputParameters:
        s3resourcesprotectedbybackupplanresourceTags: !If
          - s3resourcesprotectedbybackupplanresourceTags
          - !Ref 's3resourcesprotectedbybackupplanresourceTags'
          - !Ref 'AWS::NoValue'
        s3resourcesprotectedbybackupplanresourceId: !If
          - s3resourcesprotectedbybackupplanresourceId
          - !Ref 's3resourcesprotectedbybackupplanresourceId'
          - !Ref 'AWS::NoValue'
        s3resourcesprotectedbybackupplancrossRegionList: !If
          - s3resourcesprotectedbybackupplancrossRegionList
          - !Ref 's3resourcesprotectedbybackupplancrossRegionList'
          - !Ref 'AWS::NoValue'
        s3resourcesprotectedbybackupplancrossAccountList: !If
          - s3resourcesprotectedbybackupplancrossAccountList
          - !Ref 's3resourcesprotectedbybackupplancrossAccountList'
          - !Ref 'AWS::NoValue'
        s3resourcesprotectedbybackupplanmaxRetentionDays: !If
          - s3resourcesprotectedbybackupplanmaxRetentionDays
          - !Ref 's3resourcesprotectedbybackupplanmaxRetentionDays'
          - !Ref 'AWS::NoValue'
        s3resourcesprotectedbybackupplanminRetentionDays: !If
          - s3resourcesprotectedbybackupplanminRetentionDays
          - !Ref 's3resourcesprotectedbybackupplanminRetentionDays'
          - !Ref 'AWS::NoValue'
        s3resourcesprotectedbybackupplanbackupVaultLockCheck: !If
          - s3resourcesprotectedbybackupplanbackupVaultLockCheck
          - !Ref 's3resourcesprotectedbybackupplanbackupVaultLockCheck'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_RESOURCES_PROTECTED_BY_BACKUP_PLAN
  S3VERSIONLIFECYCLEPOLICYCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: s3-version-lifecycle-policy-check
      Description: Checks if Amazon Simple Storage Service (Amazon S3) version enabled buckets have lifecycle policy configured. The rule is NON_COMPLIANT if Amazon S3 lifecycle policy is not enabled.
      InputParameters:
        s3versionlifecyclepolicycheckbucketNames: !If
          - s3versionlifecyclepolicycheckbucketNames
          - !Ref 's3versionlifecyclepolicycheckbucketNames'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_VERSION_LIFECYCLE_POLICY_CHECK
  SECRETSMANAGERROTATIONENABLEDCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: secretsmanager-rotation-enabled-check
      Description: >-
        Checks whether AWS Secret Manager secret has rotation enabled. If the maximumAllowedRotationFrequency or the maximumAllowedRotationFrequencyInHours parameter is specified, the rotation frequency
        of the secret is compared with the maximum allowed frequency.
      InputParameters:
        secretsmanagerrotationenabledcheckmaximumAllowedRotationFrequency: !If
          - secretsmanagerrotationenabledcheckmaximumAllowedRotationFrequency
          - !Ref 'secretsmanagerrotationenabledcheckmaximumAllowedRotationFrequency'
          - !Ref 'AWS::NoValue'
        secretsmanagerrotationenabledcheckmaximumAllowedRotationFrequencyInHours: !If
          - secretsmanagerrotationenabledcheckmaximumAllowedRotationFrequencyInHours
          - !Ref 'secretsmanagerrotationenabledcheckmaximumAllowedRotationFrequencyInHours'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::SecretsManager::Secret
      Source:
        Owner: AWS
        SourceIdentifier: SECRETSMANAGER_ROTATION_ENABLED_CHECK
  SECRETSMANAGERSCHEDULEDROTATIONSUCCESSCHECK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: secretsmanager-scheduled-rotation-success-check
      Description: Checks and verifies whether AWS Secret Manager secret rotation has rotated successfully as per the rotation schedule.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - AWS::SecretsManager::Secret
      Source:
        Owner: AWS
        SourceIdentifier: SECRETSMANAGER_SCHEDULED_ROTATION_SUCCESS_CHECK
  SECRETSMANAGERSECRETPERIODICROTATION:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: secretsmanager-secret-periodic-rotation
      Description: >-
        Checks if AWS Secrets Manager secrets have been rotated in the past 90 days by examining 'LastRotatedDate' value of the secret.  If 'LastRotatedDate' doesn't exist then this rule will check for
        the creation date of the secret.
      InputParameters:
        secretsmanagersecretperiodicrotationmaxDaysSinceRotation: !If
          - secretsmanagersecretperiodicrotationmaxDaysSinceRotation
          - !Ref 'secretsmanagersecretperiodicrotationmaxDaysSinceRotation'
          - !Ref 'AWS::NoValue'
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: SECRETSMANAGER_SECRET_PERIODIC_ROTATION
  SECRETSMANAGERSECRETUNUSED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: secretsmanager-secret-unused
      Description: Checks if AWS Secrets Manager secrets have been accessed in the past 90 days. This rule is NON_COMPLIANT if a secret has not been accessed in 90 days.
      InputParameters:
        secretsmanagersecretunusedunusedForDays: !If
          - secretsmanagersecretunusedunusedForDays
          - !Ref 'secretsmanagersecretunusedunusedForDays'
          - !Ref 'AWS::NoValue'
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: SECRETSMANAGER_SECRET_UNUSED
  SECRETSMANAGERUSINGCMK:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: secretsmanager-using-cmk
      Description: >-
        Checks if all secrets in AWS Secrets Manager are encrypted using an AWS Key Management Service (AWS KMS) customer master key (CMK). This rule is NON_COMPLIANT if a secret is encrypted using the
        default AWS KMS key
      InputParameters:
        secretsmanagerusingcmkkmsKeyArns: !If
          - secretsmanagerusingcmkkmsKeyArns
          - !Ref 'secretsmanagerusingcmkkmsKeyArns'
          - !Ref 'AWS::NoValue'
      Scope:
        ComplianceResourceTypes:
          - AWS::SecretsManager::Secret
      Source:
        Owner: AWS
        SourceIdentifier: SECRETSMANAGER_USING_CMK
  SECURITYACCOUNTINFORMATIONPROVIDED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: security-account-information-provided
      Description: Checks if you have provided security contact information for your AWS account contacts. The rule is NON_COMPLIANT if security contact information within the account is not provided.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes: []
      Source:
        Owner: AWS
        SourceIdentifier: SECURITY_ACCOUNT_INFORMATION_PROVIDED
  SECURITYHUBENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: securityhub-enabled
      Description: Checks that AWS Security Hub is enabled for an AWS Account. The rule is NON_COMPLIANT if AWS Security Hub is not enabled.
      InputParameters: {}
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: SECURITYHUB_ENABLED
  SERVICEVPCENDPOINTENABLED:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: service-vpc-endpoint-enabled
      Description: >-
        Checks whether Service Endpoint for the service provided in rule parameter is created for each Amazon VPC. The rule returns NON_COMPLIANT if an Amazon VPC doesn't have a VPC endpoint created for
        the service.
      InputParameters:
        servicevpcendpointenabledserviceName: !If
          - servicevpcendpointenabledserviceName
          - !Ref 'servicevpcendpointenabledserviceName'
          - !Ref 'AWS::NoValue'
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: SERVICE_VPC_ENDPOINT_ENABLED
Parameters:
  accesskeysrotatedMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  accesskeysrotatedmaxAccessKeyAge:
    Type: String
    Default: '90'
    Description: Maximum number of days without rotation. Default 90.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  accountpartoforganizationsMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  accountpartoforganizationsMasterAccountId:
    Type: String
    Default: ''
    Description: The master account ID for an AWS account.
  albhttptohttpsredirectioncheckMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  albwafenabledwafWebAclIds:
    Type: String
    Default: ''
    Description: Comma separated list of web ACL ID (for WAF) or web ACL ARN (for WAFV2) checking for ALB association.
  approvedamisbyidamiIds:
    Type: String
    Description: Specify AMI IDs (comma separated list of up to 10).
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  approvedamisbytagamisByTagKeyAndValue:
    Type: String
    Default: tag-key:tag-value,other-tag-key
    Description: Specify AMIs by tag (comma separated list up to 10; for example, 'tag-key:tag-value').
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  backupplanminfrequencyandminretentioncheckrequiredFrequencyValue:
    Type: String
    Default: '1'
    Description: Numerical value for required backup frequency. Maximum of 24 for hours, 31 for days.
  backupplanminfrequencyandminretentioncheckrequiredRetentionDays:
    Type: String
    Default: '35'
    Description: Required retention period in days.
  backupplanminfrequencyandminretentioncheckrequiredFrequencyUnit:
    Type: String
    Default: days
    Description: 'Unit of time for required backup frequency. Accepted values: ''hours'', ''days''.'
  backuprecoverypointmanualdeletiondisabledprincipalArnList:
    Type: String
    Default: ''
    Description: Comma-separated list of AWS Identity and Access Management (IAM) Amazon Resource Names (ARNs) for the rule to NOT check.
  backuprecoverypointminimumretentioncheckrequiredRetentionDays:
    Type: String
    Default: '35'
    Description: Required retention period in days.
  cloudformationstackdriftdetectioncheckMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  cloudformationstackdriftdetectioncheckcloudformationRoleArn:
    Type: String
    Description: The AWS CloudFormation role ARN with IAM policy permissions to detect drift for AWS CloudFormation Stacks
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  cloudformationstacknotificationchecksnsTopic1:
    Type: String
    Default: ''
    Description: SNS Topic ARN.
  cloudformationstacknotificationchecksnsTopic2:
    Type: String
    Default: ''
    Description: SNS Topic ARN.
  cloudformationstacknotificationchecksnsTopic3:
    Type: String
    Default: ''
    Description: SNS Topic ARN.
  cloudformationstacknotificationchecksnsTopic4:
    Type: String
    Default: ''
    Description: SNS Topic ARN.
  cloudformationstacknotificationchecksnsTopic5:
    Type: String
    Default: ''
    Description: SNS Topic ARN.
  cloudtrailcloudwatchlogsenabledMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  cloudtrailcloudwatchlogsenabledexpectedDeliveryWindowAge:
    Type: String
    Default: ''
    Description: Maximum age in hours of the most recent delivery to CloudWatch logs that satisfies compliance.
  cloudtrailencryptionenabledMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  cloudtraillogfilevalidationenabledMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  cloudtrails3dataeventsenabledMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  cloudtrails3dataeventsenabledS3BucketNames:
    Type: String
    Default: ''
    Description: Comma-separated list of S3 bucket names for which data events logging should be enabled. Default behavior checks for all S3 buckets.
  cloudwatchloggroupencryptedMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  cloudwatchloggroupencryptedKmsKeyId:
    Type: String
    Default: ''
    Description: Amazon Resource Name (ARN) of the ID for the KMS key that is used to encrypt the log group.
  cmkbackingkeyrotationenabledMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  cwloggroupretentionperiodcheckMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  cwloggroupretentionperiodcheckLogGroupNames:
    Type: String
    Default: ''
    Description: A comma-separated list of Log Group names to check the retention period.
  cwloggroupretentionperiodcheckMinRetentionTime:
    Type: String
    Default: ''
    Description: 'Specify the retention time. Valid values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653. The default retention period is 365 days.'
  dbinstancebackupenabledbackupRetentionPeriod:
    Type: String
    Default: ''
    Description: Retention period for backups.
  dbinstancebackupenabledbackupRetentionMinimum:
    Type: String
    Default: ''
    Description: Minimum retention period for backups.
  dbinstancebackupenabledpreferredBackupWindow:
    Type: String
    Default: ''
    Description: Time range in which backups are created.
  dbinstancebackupenabledcheckReadReplicas:
    Type: String
    Default: ''
    Description: Checks whether RDS DB instances have backups enabled for read replicas.
  desiredinstancetypeinstanceType:
    Type: String
    Description: Comma separated list of EC2 instance types (for example, 't2.small, m4.large').
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  dmsreplicationnotpublicMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  ebsinbackupplanMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  ebslastbackuprecoverypointcreatedMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  ebslastbackuprecoverypointcreatedresourceTags:
    Type: String
    Default: ''
    Description: Tags of Amazon EBS volumes for the rule to check, in JSON format.
  ebslastbackuprecoverypointcreatedresourceId:
    Type: String
    Default: ''
    Description: ID of Amazon EBS volume for the rule to check.
  ebslastbackuprecoverypointcreatedrecoveryPointAgeValue:
    Type: String
    Default: '1'
    Description: Numerical value for maximum allowed age. No more than 744 for hours, 31 for days.
  ebslastbackuprecoverypointcreatedrecoveryPointAgeUnit:
    Type: String
    Default: days
    Description: 'Unit of time for maximum allowed age. Accepted values: ''hours'', ''days''.'
  ebsresourcesprotectedbybackupplanMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  ebsresourcesprotectedbybackupplanresourceTags:
    Type: String
    Default: ''
    Description: Tags for Amazon EBS volumes for the rule to check, in JSON format.
  ebsresourcesprotectedbybackupplanresourceId:
    Type: String
    Default: ''
    Description: ID of Amazon EBS volume for the rule to check.
  ebsresourcesprotectedbybackupplancrossRegionList:
    Type: String
    Default: ''
    Description: Comma-separated list of destination regions for the cross-region backup copy to be kept
  ebsresourcesprotectedbybackupplancrossAccountList:
    Type: String
    Default: ''
    Description: Comma-separated list of destination accounts for cross-account backup copy to be kept
  ebsresourcesprotectedbybackupplanmaxRetentionDays:
    Type: String
    Default: ''
    Description: The maximum retention period in days for the Backup Vault Lock
  ebsresourcesprotectedbybackupplanminRetentionDays:
    Type: String
    Default: ''
    Description: The minimum retention period in days for the Backup Vault Lock
  ebsresourcesprotectedbybackupplanbackupVaultLockCheck:
    Type: String
    Default: ''
    Description: 'Accepted values: ''True'' or ''False''. Enter ''True'' for the rule to check if the resource is backed up in a locked vault'
  ebssnapshotpublicrestorablecheckMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  ec2ebsencryptionbydefaultMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  ec2instanceprofileattachedIamInstanceProfileArnList:
    Type: String
    Default: ''
    Description: Comma-separated list of IAM profile Amazon Resource Names (ARNs) that can be attached to Amazon EC2 instances.
  ec2lastbackuprecoverypointcreatedMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  ec2lastbackuprecoverypointcreatedresourceTags:
    Type: String
    Default: ''
    Description: Tags of Amazon EC2 instances for the rule to check, in JSON format.
  ec2lastbackuprecoverypointcreatedresourceId:
    Type: String
    Default: ''
    Description: ID of Amazon EC2 instance for the rule to check.
  ec2lastbackuprecoverypointcreatedrecoveryPointAgeValue:
    Type: String
    Default: '1'
    Description: Numerical value for maximum allowed age. No more than 744 for hours, 31 for days.
  ec2lastbackuprecoverypointcreatedrecoveryPointAgeUnit:
    Type: String
    Default: days
    Description: 'Unit of time for maximum allowed age. Accepted values: ''hours'', ''days''.'
  ec2launchtemplatepublicipdisabledexemptedLaunchTemplates:
    Type: String
    Default: ''
    Description: Comma-separated list of exempted EC2 Launch Template IDs that are allowed to have Network Interfaces with the AssociatePublicIpAddress value set to 'true'.
  ec2managedinstanceapplicationsblacklistedapplicationNames:
    Type: String
    Description: Comma-separated list of application names. Optionally, specify versions appended with ':' (for example, 'Chrome:0.5.3, Firefox').
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  ec2managedinstanceapplicationsblacklistedplatformType:
    Type: String
    Default: ''
    Description: Platform type (for example, 'Linux').
  ec2managedinstanceapplicationsrequiredapplicationNames:
    Type: String
    Description: Comma-separated list of application names. Optionally, specify versions appended with ':' (for example, 'Chrome:0.5.3, Firefox').
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  ec2managedinstanceapplicationsrequiredplatformType:
    Type: String
    Default: ''
    Description: Platform type (for example, 'Linux').
  ec2managedinstanceinventoryblacklistedinventoryNames:
    Type: String
    Description: Comma separated list of Systems Manager inventory types (for example, 'AWS:Network, AWS:WindowsUpdate').
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  ec2managedinstanceinventoryblacklistedplatformType:
    Type: String
    Default: ''
    Description: Platform type (for example, 'Linux').
  ec2managedinstanceplatformcheckplatformType:
    Type: String
    Description: Platform type (for example, 'Linux').
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  ec2managedinstanceplatformcheckplatformVersion:
    Type: String
    Default: ''
    Description: Platform version (for example, '2016.09').
  ec2managedinstanceplatformcheckagentVersion:
    Type: String
    Default: ''
    Description: Agent version (for example, '2.0.433.0').
  ec2managedinstanceplatformcheckplatformName:
    Type: String
    Default: ''
    Description: The version of the platform (for example, '2016.09')
  ec2resourcesprotectedbybackupplanMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  ec2resourcesprotectedbybackupplanresourceTags:
    Type: String
    Default: ''
    Description: Tags for Amazon EC2 instances for the rule to check, in JSON format.
  ec2resourcesprotectedbybackupplanresourceId:
    Type: String
    Default: ''
    Description: ID of Amazon EC2 instance for the rule to check.
  ec2resourcesprotectedbybackupplancrossRegionList:
    Type: String
    Default: ''
    Description: Comma-separated list of destination regions for the cross-region backup copy to be kept
  ec2resourcesprotectedbybackupplancrossAccountList:
    Type: String
    Default: ''
    Description: Comma-separated list of destination accounts for cross-account backup copy to be kept
  ec2resourcesprotectedbybackupplanmaxRetentionDays:
    Type: String
    Default: ''
    Description: The maximum retention period in days for the Backup Vault Lock
  ec2resourcesprotectedbybackupplanminRetentionDays:
    Type: String
    Default: ''
    Description: The minimum retention period in days for the Backup Vault Lock
  ec2resourcesprotectedbybackupplanbackupVaultLockCheck:
    Type: String
    Default: ''
    Description: 'Accepted values: ''True'' or ''False''. Enter ''True'' for the rule to check if the resource is backed up in a locked vault'
  ec2stoppedinstanceMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  ec2stoppedinstanceAllowedDays:
    Type: String
    Default: '30'
    Description: Number of days the instance can be stopped for before it becomes non-compliant. The default number of days is 30.
  ec2volumeinusecheckdeleteOnTermination:
    Type: String
    Default: ''
    Description: EBS volumes are marked for deletion when an instance is terminated.
  efsaccesspointenforcerootdirectoryapprovedDirectories:
    Type: String
    Default: ''
    Description: Comma-separated list of subdirectory paths that are approved for Amazon EFS access point root directory enforcement.
  efsaccesspointenforceuseridentityapprovedUids:
    Type: String
    Default: ''
    Description: Comma-separated list of POSIX user ID that are approved for EFS access point user enforcement.
  efsaccesspointenforceuseridentityapprovedGids:
    Type: String
    Default: ''
    Description: Comma-separated list of POSIX group IDs that are approved for EFS access point user enforcement.
  efsencryptedcheckMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  efsencryptedcheckKmsKeyId:
    Type: String
    Default: ''
    Description: Amazon Resource Name (ARN) of the KMS key that is used to encrypt the EFS file system.
  efsinbackupplanMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  efslastbackuprecoverypointcreatedMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  efslastbackuprecoverypointcreatedresourceTags:
    Type: String
    Default: ''
    Description: Tags of Amazon EFS File Systems for the rule to check, in JSON format.
  efslastbackuprecoverypointcreatedresourceId:
    Type: String
    Default: ''
    Description: ID of EFS File System for the rule to check.
  efslastbackuprecoverypointcreatedrecoveryPointAgeValue:
    Type: String
    Default: '1'
    Description: Numerical value for maximum allowed age. No more than 744 for hours, 31 for days.
  efslastbackuprecoverypointcreatedrecoveryPointAgeUnit:
    Type: String
    Default: days
    Description: 'Unit of time for maximum allowed age. Accepted values: ''hours'', ''days''.'
  efsresourcesprotectedbybackupplanMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  efsresourcesprotectedbybackupplanresourceTags:
    Type: String
    Default: ''
    Description: Tags for EFS File Systems for the rule to check, in JSON format.
  efsresourcesprotectedbybackupplanresourceId:
    Type: String
    Default: ''
    Description: ID of the EFS File System for the rule to check.
  efsresourcesprotectedbybackupplancrossRegionList:
    Type: String
    Default: ''
    Description: Comma-separated list of destination regions for the cross-region backup copy to be kept
  efsresourcesprotectedbybackupplancrossAccountList:
    Type: String
    Default: ''
    Description: Comma-separated list of destination accounts for cross-account backup copy to be kept
  efsresourcesprotectedbybackupplanmaxRetentionDays:
    Type: String
    Default: ''
    Description: The maximum retention period in days for the Backup Vault Lock
  efsresourcesprotectedbybackupplanminRetentionDays:
    Type: String
    Default: ''
    Description: The minimum retention period in days for the Backup Vault Lock
  efsresourcesprotectedbybackupplanbackupVaultLockCheck:
    Type: String
    Default: ''
    Description: 'Accepted values: ''True'' or ''False''. Enter ''True'' for the rule to check if the resource is backed up in a locked vault'
  elasticsearchencryptedatrestMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  elasticsearchinvpconlyMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  elasticsearchlogstocloudwatchlogTypes:
    Type: String
    Default: ''
    Description: Comma-separated list of logs that are enabled. Valid values are 'search', 'index', 'error'.
  elbloggingenableds3BucketNames:
    Type: String
    Default: ''
    Description: Comma-separated list of Amazon S3 bucket names for Amazon ELB to deliver the log files.
  encryptedvolumeskmsId:
    Type: String
    Default: ''
    Description: ID or ARN of the KMS key that is used to encrypt the volume.
  fmsshieldresourcepolicycheckwebACLId:
    Type: String
    Description: The WebACLId of the web ACL.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  fmsshieldresourcepolicycheckresourceTypes:
    Type: String
    Description: The resource scope which this config rule will be applied to.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  fmsshieldresourcepolicycheckresourceTags:
    Type: String
    Default: ''
    Description: 'The resource tags that the rule should be associated with (for example, { "tagKey1" : ["tagValue1"], "tagKey2" : ["tagValue2", "tagValue3"] }).'
  fmsshieldresourcepolicycheckexcludeResourceTags:
    Type: String
    Default: ''
    Description: If true, exclude the resources that match the resourceTags. If false, include all the resources that match the resourceTags.
  fmsshieldresourcepolicycheckfmsManagedToken:
    Type: String
    Default: ''
    Description: A token generated by AWS Firewall Manager when creating the rule in your account. AWS Config ignores this parameter when you create this rule.
  fmsshieldresourcepolicycheckfmsRemediationEnabled:
    Type: String
    Default: ''
    Description: If true, AWS Firewall Manager will update NON_COMPLIANT resources according to FMS policy. AWS Config ignores this parameter when you create this rule.
  fmswebaclresourcepolicycheckwebACLId:
    Type: String
    Description: The WebACLId of the web ACL.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  fmswebaclresourcepolicycheckresourceTags:
    Type: String
    Default: ''
    Description: >-
      The resource tags (ApplicationLoadBalancer, ApiGatewayStage and CloudFront distributions) that the rule should be associated with. (for example, { "tagKey1" : ["tagValue1"], "tagKey2" : ["tagValue2",
      "tagValue3"] })
  fmswebaclresourcepolicycheckexcludeResourceTags:
    Type: String
    Default: ''
    Description: If true, exclude resources that match resourceTags.
  fmswebaclresourcepolicycheckfmsManagedToken:
    Type: String
    Default: ''
    Description: A token generated by AWS Firewall Manager when creating the rule in customer account. AWS Config ignores this parameter when customer creates this rule.
  fmswebaclresourcepolicycheckfmsRemediationEnabled:
    Type: String
    Default: ''
    Description: If true, AWS Firewall Manager will update non-compliant resources according to FMS policy. AWS Config ignores this parameter when customer creates this rule.
  fmswebaclrulegroupassociationcheckruleGroups:
    Type: String
    Description: Comma-separated list of RuleGroupIds and WafOverrideAction pairs. (for example, ruleGroupId-1:NONE, ruleGroupId2:COUNT)
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  fmswebaclrulegroupassociationcheckfmsManagedToken:
    Type: String
    Default: ''
    Description: A token generated by AWS Firewall Manager when creating the rule in customer account. AWS Config ignores this parameter when customer creates this rule.
  fmswebaclrulegroupassociationcheckfmsRemediationEnabled:
    Type: String
    Default: ''
    Description: If true, AWS Firewall Manager will update non-compliant resources according to FMS policy. AWS Config ignores this parameter when customer creates this rule.
  guarddutyenabledcentralizedMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  guarddutyenabledcentralizedCentralMonitoringAccount:
    Type: String
    Default: ''
    Description: Comma separated list of AWS Accounts (12-digit) where Amazon GuardDuty results are allowed to be centralized.
  guarddutynonarchivedfindingsMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  guarddutynonarchivedfindingsdaysLowSev:
    Type: String
    Default: '30'
    Description: The number of days Amazon GuardDuty low severity findings are allowed to stay non archived. The default is 30 days.
  guarddutynonarchivedfindingsdaysMediumSev:
    Type: String
    Default: '7'
    Description: The number of days Amazon GuardDuty medium severity findings are allowed to stay non archived. The default is 7 days.
  guarddutynonarchivedfindingsdaysHighSev:
    Type: String
    Default: '1'
    Description: The number of days Amazon GuardDuty high severity findings are allowed to stay non archived. The default is 1 day.
  iamcustomerpolicyblockedkmsactionsblockedActionsPatterns:
    Type: String
    Description: Comma-separated list of blocked KMS action patterns, for example, kms:*, kms:Decrypt, kms:ReEncrypt*.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  iamcustomerpolicyblockedkmsactionsexcludePermissionBoundaryPolicy:
    Type: String
    Default: ''
    Description: >-
      Boolean flag to exclude the evaluation of IAM policies used as permissions boundaries. If set to 'true', the rule will not include permissions boundaries in the evaluation. Otherwise, all IAM policies
      in scope are evaluated when value is set to 'false.' Default value is 'false'.
  iaminlinepolicyblockedkmsactionsblockedActionsPatterns:
    Type: String
    Description: Comma-separated list of blocked KMS action patterns, for example, kms:*, kms:Decrypt, kms:ReEncrypt*.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  iaminlinepolicyblockedkmsactionsexcludeRoleByManagementAccount:
    Type: String
    Default: ''
    Description: Exclude a role if it is only assumable by organization management account.
  iampasswordpolicyMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  iampasswordpolicyRequireUppercaseCharacters:
    Type: String
    Default: 'true'
    Description: Require at least one uppercase character in password.
  iampasswordpolicyRequireLowercaseCharacters:
    Type: String
    Default: 'true'
    Description: Require at least one lowercase character in password.
  iampasswordpolicyRequireSymbols:
    Type: String
    Default: 'true'
    Description: Require at least one symbol in password.
  iampasswordpolicyRequireNumbers:
    Type: String
    Default: 'true'
    Description: Require at least one number in password.
  iampasswordpolicyMinimumPasswordLength:
    Type: String
    Default: '14'
    Description: Password minimum length.
  iampasswordpolicyPasswordReusePrevention:
    Type: String
    Default: '24'
    Description: Number of passwords before allowing reuse.
  iampasswordpolicyMaxPasswordAge:
    Type: String
    Default: '90'
    Description: Number of days before password expiration.
  iampolicyblacklistedcheckpolicyArns:
    Type: String
    Default: arn:aws:iam::aws:policy/AdministratorAccess
    Description: Comma separated list of IAM policy arns which should not be attached to any IAM entity.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  iampolicyblacklistedcheckexceptionList:
    Type: String
    Default: ''
    Description: Comma separated list of resourcetypes and list of resource name pairs. (for example, users:[user1;user2], groups:[group1;group2], roles:[role1;role2;role3]).
  iampolicyinuseMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  iampolicyinusepolicyARN:
    Type: String
    Description: An IAM policy ARN to be checked.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  iampolicyinusepolicyUsageType:
    Type: String
    Default: ''
    Description: Specify whether you expect the policy to be attached to an IAM user, group or role. Valid values are IAM_USER, IAM_GROUP, IAM_ROLE, or ANY. Default value is ANY.
  iampolicynostatementswithadminaccessexcludePermissionBoundaryPolicy:
    Type: String
    Default: ''
    Description: >-
      Boolean flag to exclude the evaluation of IAM policies used as permissions boundaries. If set to 'true', the rule will not include permissions boundaries in the evaluation. Otherwise, all IAM policies
      in scope are evaluated when value is set to 'false.' Default value is 'false'.
  iampolicynostatementswithfullaccessexcludePermissionBoundaryPolicy:
    Type: String
    Default: ''
    Description: >-
      Boolean flag to exclude the evaluation of IAM policies used as permissions boundaries. If set to 'true', the rule will not include permissions boundaries in the evaluation. Otherwise, all IAM policies
      in scope are evaluated when value is set to 'false.' Default value is 'false'.
  iamrolemanagedpolicycheckmanagedPolicyArns:
    Type: String
    Description: Comma-separated list of AWS managed policy ARNs.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  iamrootaccesskeycheckMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  iamusergroupmembershipcheckgroupNames:
    Type: String
    Default: ''
    Description: Comma separated list of IAM groups in which IAM users must be members.
  iamusermfaenabledMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  iamuserunusedcredentialscheckMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  iamuserunusedcredentialscheckmaxCredentialUsageAge:
    Type: String
    Default: '90'
    Description: Maximum number of days a credential cannot be used. The default value is 90 days.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  internetgatewayauthorizedvpconlyAuthorizedVpcIds:
    Type: String
    Default: ''
    Description: Comma-separated list of the authorized VPC IDs with attached IGWs. If parameter is not provided all attached IGWs will be NON_COMPLIANT.
  kmscmknotscheduledfordeletionMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  kmscmknotscheduledfordeletionkmsKeyIds:
    Type: String
    Default: ''
    Description: (Optional) Comma-separated list of specific customer managed key IDs not to be scheduled for deletion. If you do not specify any keys, the rule checks all the keys.
  lambdaconcurrencycheckConcurrencyLimitLow:
    Type: String
    Default: ''
    Description: Minimum concurrency execution limit
  lambdaconcurrencycheckConcurrencyLimitHigh:
    Type: String
    Default: ''
    Description: Maximum concurrency execution limit
  lambdadlqcheckdlqArns:
    Type: String
    Default: ''
    Description: Comma-separated list of Amazon SQS and Amazon SNS ARNs that must be configured as the Lambda function dead-letter queue target.
  lambdafunctionsettingscheckruntime:
    Type: String
    Description: Comma-separated list of AWS Lambda runtime values
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  lambdafunctionsettingscheckrole:
    Type: String
    Default: ''
    Description: Name or ARN of the AWS Lambda execution role
  lambdafunctionsettingschecktimeout:
    Type: String
    Default: '3'
    Description: AWS Lambda function timeout in seconds
  lambdafunctionsettingscheckmemorySize:
    Type: String
    Default: '128'
    Description: AWS Lambda function size in megabytes
  lambdainsidevpcsubnetIds:
    Type: String
    Default: ''
    Description: Comma-separated list of Subnet IDs that Lambda functions can be associated with.
  lambdavpcmultiazcheckavailabilityZones:
    Type: String
    Default: ''
    Description: Number of expected Availability zones.
  mfaenabledforiamconsoleaccessMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  netfwpolicydefaultactionfragmentpacketsstatelessFragmentDefaultActions:
    Type: String
    Description: Comma-separated list of values. You can select a max of two. Valid values include 'aws:pass', 'aws:drop', and 'aws:forward_to_sfe'.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  netfwpolicydefaultactionfullpacketsstatelessDefaultActions:
    Type: String
    Description: Comma-separated list of values. You can select a max of two. Valid values include 'aws:pass', 'aws:drop', and 'aws:forward_to_sfe'.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  nounrestrictedroutetoigwrouteTableIds:
    Type: String
    Default: ''
    Description: Comma-separated list of route table IDs that can have routes to an Internet Gateway with a destination CIDR block of '0.0.0.0/0' or '::/0'.
  opensearchauditloggingenabledcloudWatchLogsLogGroupArnList:
    Type: String
    Default: ''
    Description: Comma-separated list of Amazon CloudWatch Logs log groups that should be configured for audit logs.
  opensearchhttpsrequiredtlsPolicies:
    Type: String
    Default: ''
    Description: Comma-separated list of TLS security policies to check against the Amazon OpensSearch domain.
  opensearchlogstocloudwatchlogTypes:
    Type: String
    Default: ''
    Description: Comma-separated list of logs that are enabled. Valid values are 'search', 'index', 'error'.
  rdsclusterdefaultadmincheckvalidAdminUserNames:
    Type: String
    Default: ''
    Description: Comma-separated list of admin username(s) that Amazon RDS clusters can use. Cannot include 'postgres' or 'admin' as valid username(s) as these are default values.
  rdsenhancedmonitoringenabledmonitoringInterval:
    Type: String
    Default: ''
    Description: An integer value in seconds between points when enhanced monitoring metrics are collected for the database instance. The valid values are 1, 5, 10, 15, 30, and 60.
  rdsinbackupplanMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  rdsinstancedefaultadmincheckvalidAdminUserNames:
    Type: String
    Default: ''
    Description: Comma-separated list of admin username(s) that Amazon RDS instances can use. (Cannot include 'postgres' or 'admin' as valid username(s) as these are default values.)
  rdsinstancedeletionprotectionenableddatabaseEngines:
    Type: String
    Default: ''
    Description: Comma-separated list of RDS database engines to include in the evaluation of the rule.
  rdslastbackuprecoverypointcreatedMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  rdslastbackuprecoverypointcreatedresourceTags:
    Type: String
    Default: ''
    Description: Tags of Amazon RDS instances for the rule to check, in JSON format.
  rdslastbackuprecoverypointcreatedresourceId:
    Type: String
    Default: ''
    Description: ID of Amazon RDS instance for the rule to check.
  rdslastbackuprecoverypointcreatedrecoveryPointAgeValue:
    Type: String
    Default: '1'
    Description: Numerical value for maximum allowed age. No more than 744 for hours, 31 for days.
  rdslastbackuprecoverypointcreatedrecoveryPointAgeUnit:
    Type: String
    Default: days
    Description: 'Unit of time for maximum allowed age. Accepted values: ''hours'', ''days''.'
  rdsloggingenabledadditionalLogs:
    Type: String
    Default: ''
    Description: Comma-separated list of engine names and log type names.
  rdsresourcesprotectedbybackupplanMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  rdsresourcesprotectedbybackupplanresourceTags:
    Type: String
    Default: ''
    Description: Tags for Amazon RDS instances for the rule to check, in JSON format.
  rdsresourcesprotectedbybackupplanresourceId:
    Type: String
    Default: ''
    Description: ID of Amazon RDS instance for the rule to check.
  rdsresourcesprotectedbybackupplancrossRegionList:
    Type: String
    Default: ''
    Description: Comma-separated list of destination regions for the cross-region backup copy to be kept
  rdsresourcesprotectedbybackupplancrossAccountList:
    Type: String
    Default: ''
    Description: Comma-separated list of destination accounts for cross-account backup copy to be kept
  rdsresourcesprotectedbybackupplanmaxRetentionDays:
    Type: String
    Default: ''
    Description: The maximum retention period in days for the Backup Vault Lock
  rdsresourcesprotectedbybackupplanminRetentionDays:
    Type: String
    Default: ''
    Description: The minimum retention period in days for the Backup Vault Lock
  rdsresourcesprotectedbybackupplanbackupVaultLockCheck:
    Type: String
    Default: ''
    Description: 'Accepted values: ''True'' or ''False''. Enter ''True'' for the rule to check if the resource is backed up in a locked vault'
  rdsstorageencryptedkmsKeyId:
    Type: String
    Default: ''
    Description: KMS key ID or ARN used to encrypt the stosrage.
  requiredtagstag1Key:
    Type: String
    Default: CostCenter
    Description: Key of the required tag.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  requiredtagstag1Value:
    Type: String
    Default: ''
    Description: Optional value of the required tag. Separate multiple values with commas.
  requiredtagstag2Key:
    Type: String
    Default: ''
    Description: Key of a second required tag.
  requiredtagstag2Value:
    Type: String
    Default: ''
    Description: Optional value of the second required tag. Separate multiple values with commas.
  requiredtagstag3Key:
    Type: String
    Default: ''
    Description: Key of a third required tag.
  requiredtagstag3Value:
    Type: String
    Default: ''
    Description: Optional value of the third required tag. Separate multiple values with commas.
  requiredtagstag4Key:
    Type: String
    Default: ''
    Description: Key of a fourth required tag.
  requiredtagstag4Value:
    Type: String
    Default: ''
    Description: Optional value of the fourth required tag. Separate multiple values with commas.
  requiredtagstag5Key:
    Type: String
    Default: ''
    Description: Key of a fifth required tag.
  requiredtagstag5Value:
    Type: String
    Default: ''
    Description: Optional value of the fifth required tag. Separate multiple values with commas.
  requiredtagstag6Key:
    Type: String
    Default: ''
    Description: Key of a sixth required tag.
  requiredtagstag6Value:
    Type: String
    Default: ''
    Description: Optional value of the sixth required tag. Separate multiple values with commas.
  rootaccountmfaenabledMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  s3accountlevelpublicaccessblocksIgnorePublicAcls:
    Type: String
    Default: 'True'
    Description: IgnorePublicAcls is enforced or not, default True
  s3accountlevelpublicaccessblocksBlockPublicPolicy:
    Type: String
    Default: 'True'
    Description: BlockPublicPolicy is enforced or not, default True
  s3accountlevelpublicaccessblocksBlockPublicAcls:
    Type: String
    Default: 'True'
    Description: BlockPublicAcls is enforced or not, default True
  s3accountlevelpublicaccessblocksRestrictPublicBuckets:
    Type: String
    Default: 'True'
    Description: RestrictPublicBuckets is enforced or not, default True
  s3accountlevelpublicaccessblocksperiodicMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  s3accountlevelpublicaccessblocksperiodicIgnorePublicAcls:
    Type: String
    Default: ''
    Description: IgnorePublicAcls is enforced or not, default True
  s3accountlevelpublicaccessblocksperiodicBlockPublicPolicy:
    Type: String
    Default: ''
    Description: BlockPublicPolicy is enforced or not, default True
  s3accountlevelpublicaccessblocksperiodicBlockPublicAcls:
    Type: String
    Default: ''
    Description: BlockPublicAcls is enforced or not, default True
  s3accountlevelpublicaccessblocksperiodicRestrictPublicBuckets:
    Type: String
    Default: ''
    Description: RestrictPublicBuckets is enforced or not, default True
  s3bucketpolicygranteecheckawsPrincipals:
    Type: String
    Default: ''
    Description: Comma-separated list of principals such as IAM User ARNs, IAM Role ARNs and AWS accounts, for example 'arn:aws:iam::111122223333:user/Alice, arn:aws:iam::444455556666:role/Bob, 123456789012'.
  s3bucketpolicygranteecheckservicePrincipals:
    Type: String
    Default: ''
    Description: Comma-separated list of service principals, for example 'cloudtrail.amazonaws.com, lambda.amazonaws.com'.
  s3bucketpolicygranteecheckfederatedUsers:
    Type: String
    Default: ''
    Description: >-
      Comma-separated list of identity providers for web identity federation such as Amazon Cognito and SAML identity providers. For example 'cognito-identity.amazonaws.com, arn:aws:iam::111122223333:saml-provider/my-provider'.
  s3bucketpolicygranteecheckipAddresses:
    Type: String
    Default: ''
    Description: Comma-separated list of CIDR formatted IP addresses, for example '10.0.0.1, 192.168.1.0/24, 2001:db8::/32'.
  s3bucketpolicygranteecheckvpcIds:
    Type: String
    Default: ''
    Description: Comma-separated list of Amazon Virtual Private Clouds (Amazon VPC) IDs, for example 'vpc-1234abc0, vpc-ab1234c0'.
  s3bucketpolicynotmorepermissivecontrolPolicy:
    Type: String
    Description: Amazon S3 bucket policy that defines an upper bound on the permissions of your S3 buckets. The policy can be a maximum of 1024 characters long.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
  s3bucketpublicreadprohibitedMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  s3bucketpublicwriteprohibitedMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  s3bucketreplicationenabledReplicationType:
    Type: String
    Default: ''
    Description: >-
      Accepted values: 'CROSS-REGION' and 'SAME-REGION'. Enter 'CROSS-REGION' for the rule to check that all buckets have only Cross-Region Replication enabled. Enter 'SAME-REGION' for the rule to check
      that all buckets have only Same-Region Replication enabled.
  s3bucketversioningenabledisMfaDeleteEnabled:
    Type: String
    Default: ''
    Description: MFA delete is enabled for your S3 buckets.
  s3defaultencryptionkmskmsKeyArns:
    Type: String
    Default: ''
    Description: Comma separated list of AWS KMS key ARNs allowed for encrypting Amazon S3 Buckets.
  s3eventnotificationsenableddestinationArn:
    Type: String
    Default: ''
    Description: The Amazon Resource Name (ARN) of the destination for the event notification (Amazon SNS topic, AWS Lambda, Amazon SQS Queue).
  s3eventnotificationsenabledeventTypes:
    Type: String
    Default: ''
    Description: Comma-separated list of the preferred Amazon S3 event types
  s3lastbackuprecoverypointcreatedMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  s3lastbackuprecoverypointcreatedresourceTags:
    Type: String
    Default: ''
    Description: Tags of Amazon S3 bucket for the rule to check, in JSON format.
  s3lastbackuprecoverypointcreatedresourceId:
    Type: String
    Default: ''
    Description: Name of Amazon S3 bucket for the rule to check.
  s3lastbackuprecoverypointcreatedrecoveryPointAgeValue:
    Type: String
    Default: '1'
    Description: Numerical value for maximum allowed age. No more than 744 for hours, 31 for days.
  s3lastbackuprecoverypointcreatedrecoveryPointAgeUnit:
    Type: String
    Default: days
    Description: 'Unit of time for maximum allowed age. Accepted values: ''hours'', ''days''.'
  s3lifecyclepolicychecktargetTransitionDays:
    Type: String
    Default: ''
    Description: Number of days after object creation when objects are transitioned to a specified storage class (for example, 30 days).
  s3lifecyclepolicychecktargetExpirationDays:
    Type: String
    Default: ''
    Description: Number of days after object creation when objects are deleted (for example, 395 days).
  s3lifecyclepolicychecktargetTransitionStorageClass:
    Type: String
    Default: ''
    Description: >-
      Destination storage class type (for example, Amazon S3 Standard-Infrequent Access (S3 Standard-IA). For more information, see https: //docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html.
  s3lifecyclepolicychecktargetPrefix:
    Type: String
    Default: ''
    Description: Amazon S3 Object prefix to identify one or more objects.
  s3lifecyclepolicycheckbucketNames:
    Type: String
    Default: ''
    Description: Comma-separated list of Amazon S3 bucket names that have lifecycle policy enabled.
  s3resourcesprotectedbybackupplanMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  s3resourcesprotectedbybackupplanresourceTags:
    Type: String
    Default: ''
    Description: Tags for Amazon S3 buckets for the rule to check, in JSON format.
  s3resourcesprotectedbybackupplanresourceId:
    Type: String
    Default: ''
    Description: Name of Amazon S3 bucket for the rule to check.
  s3resourcesprotectedbybackupplancrossRegionList:
    Type: String
    Default: ''
    Description: Comma-separated list of destination regions for the cross-region backup copy to be kept
  s3resourcesprotectedbybackupplancrossAccountList:
    Type: String
    Default: ''
    Description: Comma-separated list of destination accounts for cross-account backup copy to be kept
  s3resourcesprotectedbybackupplanmaxRetentionDays:
    Type: String
    Default: ''
    Description: The maximum retention period in days for the Backup Vault Lock
  s3resourcesprotectedbybackupplanminRetentionDays:
    Type: String
    Default: ''
    Description: The minimum retention period in days for the Backup Vault Lock
  s3resourcesprotectedbybackupplanbackupVaultLockCheck:
    Type: String
    Default: ''
    Description: 'Accepted values: ''True'' or ''False''. Enter ''True'' for the rule to check if the resource is backed up in a locked vault'
  s3versionlifecyclepolicycheckbucketNames:
    Type: String
    Default: ''
    Description: Comma-separated list of Amazon S3 bucket names that have lifecycle policy enabled.
  secretsmanagerrotationenabledcheckmaximumAllowedRotationFrequency:
    Type: String
    Default: ''
    Description: Maximum allowed rotation frequency of the secret in days.
  secretsmanagerrotationenabledcheckmaximumAllowedRotationFrequencyInHours:
    Type: String
    Default: ''
    Description: Maximum allowed rotation frequency of the secret in hours.
  secretsmanagersecretperiodicrotationMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  secretsmanagersecretperiodicrotationmaxDaysSinceRotation:
    Type: String
    Default: ''
    Description: 'The number of days in which a secret can remain unchanged. '
  secretsmanagersecretunusedMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  secretsmanagersecretunusedunusedForDays:
    Type: String
    Default: ''
    Description: The number of days in which a secret can remain unused. Valid value is a positive integer.
  secretsmanagerusingcmkkmsKeyArns:
    Type: String
    Default: ''
    Description: Comma-separated list of KMS key Amazon Resource Names (ARNs) to check if the keys are used in the encryption.
  securityaccountinformationprovidedMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  securityhubenabledMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  servicevpcendpointenabledMaximumExecutionFrequency:
    Type: String
    Default: TwentyFour_Hours
    Description: The frequency that you want AWS Config to run evaluations for the rule.
    MinLength: '1'
    ConstraintDescription: This parameter is required.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  servicevpcendpointenabledserviceName:
    Type: String
    Description: 'The short name or suffix for the service. Note: To get a list of available service names or valid suffix list, use DescribeVpcEndpointServices.'
    MinLength: '1'
    ConstraintDescription: This parameter is required.
Conditions:
  accesskeysrotatedmaxAccessKeyAge: !Not
    - !Equals
      - ''
      - !Ref 'accesskeysrotatedmaxAccessKeyAge'
  accountpartoforganizationsMasterAccountId: !Not
    - !Equals
      - ''
      - !Ref 'accountpartoforganizationsMasterAccountId'
  albwafenabledwafWebAclIds: !Not
    - !Equals
      - ''
      - !Ref 'albwafenabledwafWebAclIds'
  approvedamisbyidamiIds: !Not
    - !Equals
      - ''
      - !Ref 'approvedamisbyidamiIds'
  approvedamisbytagamisByTagKeyAndValue: !Not
    - !Equals
      - ''
      - !Ref 'approvedamisbytagamisByTagKeyAndValue'
  backupplanminfrequencyandminretentioncheckrequiredFrequencyValue: !Not
    - !Equals
      - ''
      - !Ref 'backupplanminfrequencyandminretentioncheckrequiredFrequencyValue'
  backupplanminfrequencyandminretentioncheckrequiredRetentionDays: !Not
    - !Equals
      - ''
      - !Ref 'backupplanminfrequencyandminretentioncheckrequiredRetentionDays'
  backupplanminfrequencyandminretentioncheckrequiredFrequencyUnit: !Not
    - !Equals
      - ''
      - !Ref 'backupplanminfrequencyandminretentioncheckrequiredFrequencyUnit'
  backuprecoverypointmanualdeletiondisabledprincipalArnList: !Not
    - !Equals
      - ''
      - !Ref 'backuprecoverypointmanualdeletiondisabledprincipalArnList'
  backuprecoverypointminimumretentioncheckrequiredRetentionDays: !Not
    - !Equals
      - ''
      - !Ref 'backuprecoverypointminimumretentioncheckrequiredRetentionDays'
  cloudformationstackdriftdetectioncheckcloudformationRoleArn: !Not
    - !Equals
      - ''
      - !Ref 'cloudformationstackdriftdetectioncheckcloudformationRoleArn'
  cloudformationstacknotificationchecksnsTopic1: !Not
    - !Equals
      - ''
      - !Ref 'cloudformationstacknotificationchecksnsTopic1'
  cloudformationstacknotificationchecksnsTopic2: !Not
    - !Equals
      - ''
      - !Ref 'cloudformationstacknotificationchecksnsTopic2'
  cloudformationstacknotificationchecksnsTopic3: !Not
    - !Equals
      - ''
      - !Ref 'cloudformationstacknotificationchecksnsTopic3'
  cloudformationstacknotificationchecksnsTopic4: !Not
    - !Equals
      - ''
      - !Ref 'cloudformationstacknotificationchecksnsTopic4'
  cloudformationstacknotificationchecksnsTopic5: !Not
    - !Equals
      - ''
      - !Ref 'cloudformationstacknotificationchecksnsTopic5'
  cloudtrailcloudwatchlogsenabledexpectedDeliveryWindowAge: !Not
    - !Equals
      - ''
      - !Ref 'cloudtrailcloudwatchlogsenabledexpectedDeliveryWindowAge'
  cloudtrails3dataeventsenabledS3BucketNames: !Not
    - !Equals
      - ''
      - !Ref 'cloudtrails3dataeventsenabledS3BucketNames'
  cloudwatchloggroupencryptedKmsKeyId: !Not
    - !Equals
      - ''
      - !Ref 'cloudwatchloggroupencryptedKmsKeyId'
  cwloggroupretentionperiodcheckLogGroupNames: !Not
    - !Equals
      - ''
      - !Ref 'cwloggroupretentionperiodcheckLogGroupNames'
  cwloggroupretentionperiodcheckMinRetentionTime: !Not
    - !Equals
      - ''
      - !Ref 'cwloggroupretentionperiodcheckMinRetentionTime'
  dbinstancebackupenabledbackupRetentionPeriod: !Not
    - !Equals
      - ''
      - !Ref 'dbinstancebackupenabledbackupRetentionPeriod'
  dbinstancebackupenabledbackupRetentionMinimum: !Not
    - !Equals
      - ''
      - !Ref 'dbinstancebackupenabledbackupRetentionMinimum'
  dbinstancebackupenabledpreferredBackupWindow: !Not
    - !Equals
      - ''
      - !Ref 'dbinstancebackupenabledpreferredBackupWindow'
  dbinstancebackupenabledcheckReadReplicas: !Not
    - !Equals
      - ''
      - !Ref 'dbinstancebackupenabledcheckReadReplicas'
  desiredinstancetypeinstanceType: !Not
    - !Equals
      - ''
      - !Ref 'desiredinstancetypeinstanceType'
  ebslastbackuprecoverypointcreatedresourceTags: !Not
    - !Equals
      - ''
      - !Ref 'ebslastbackuprecoverypointcreatedresourceTags'
  ebslastbackuprecoverypointcreatedresourceId: !Not
    - !Equals
      - ''
      - !Ref 'ebslastbackuprecoverypointcreatedresourceId'
  ebslastbackuprecoverypointcreatedrecoveryPointAgeValue: !Not
    - !Equals
      - ''
      - !Ref 'ebslastbackuprecoverypointcreatedrecoveryPointAgeValue'
  ebslastbackuprecoverypointcreatedrecoveryPointAgeUnit: !Not
    - !Equals
      - ''
      - !Ref 'ebslastbackuprecoverypointcreatedrecoveryPointAgeUnit'
  ebsresourcesprotectedbybackupplanresourceTags: !Not
    - !Equals
      - ''
      - !Ref 'ebsresourcesprotectedbybackupplanresourceTags'
  ebsresourcesprotectedbybackupplanresourceId: !Not
    - !Equals
      - ''
      - !Ref 'ebsresourcesprotectedbybackupplanresourceId'
  ebsresourcesprotectedbybackupplancrossRegionList: !Not
    - !Equals
      - ''
      - !Ref 'ebsresourcesprotectedbybackupplancrossRegionList'
  ebsresourcesprotectedbybackupplancrossAccountList: !Not
    - !Equals
      - ''
      - !Ref 'ebsresourcesprotectedbybackupplancrossAccountList'
  ebsresourcesprotectedbybackupplanmaxRetentionDays: !Not
    - !Equals
      - ''
      - !Ref 'ebsresourcesprotectedbybackupplanmaxRetentionDays'
  ebsresourcesprotectedbybackupplanminRetentionDays: !Not
    - !Equals
      - ''
      - !Ref 'ebsresourcesprotectedbybackupplanminRetentionDays'
  ebsresourcesprotectedbybackupplanbackupVaultLockCheck: !Not
    - !Equals
      - ''
      - !Ref 'ebsresourcesprotectedbybackupplanbackupVaultLockCheck'
  ec2instanceprofileattachedIamInstanceProfileArnList: !Not
    - !Equals
      - ''
      - !Ref 'ec2instanceprofileattachedIamInstanceProfileArnList'
  ec2lastbackuprecoverypointcreatedresourceTags: !Not
    - !Equals
      - ''
      - !Ref 'ec2lastbackuprecoverypointcreatedresourceTags'
  ec2lastbackuprecoverypointcreatedresourceId: !Not
    - !Equals
      - ''
      - !Ref 'ec2lastbackuprecoverypointcreatedresourceId'
  ec2lastbackuprecoverypointcreatedrecoveryPointAgeValue: !Not
    - !Equals
      - ''
      - !Ref 'ec2lastbackuprecoverypointcreatedrecoveryPointAgeValue'
  ec2lastbackuprecoverypointcreatedrecoveryPointAgeUnit: !Not
    - !Equals
      - ''
      - !Ref 'ec2lastbackuprecoverypointcreatedrecoveryPointAgeUnit'
  ec2launchtemplatepublicipdisabledexemptedLaunchTemplates: !Not
    - !Equals
      - ''
      - !Ref 'ec2launchtemplatepublicipdisabledexemptedLaunchTemplates'
  ec2managedinstanceapplicationsblacklistedapplicationNames: !Not
    - !Equals
      - ''
      - !Ref 'ec2managedinstanceapplicationsblacklistedapplicationNames'
  ec2managedinstanceapplicationsblacklistedplatformType: !Not
    - !Equals
      - ''
      - !Ref 'ec2managedinstanceapplicationsblacklistedplatformType'
  ec2managedinstanceapplicationsrequiredapplicationNames: !Not
    - !Equals
      - ''
      - !Ref 'ec2managedinstanceapplicationsrequiredapplicationNames'
  ec2managedinstanceapplicationsrequiredplatformType: !Not
    - !Equals
      - ''
      - !Ref 'ec2managedinstanceapplicationsrequiredplatformType'
  ec2managedinstanceinventoryblacklistedinventoryNames: !Not
    - !Equals
      - ''
      - !Ref 'ec2managedinstanceinventoryblacklistedinventoryNames'
  ec2managedinstanceinventoryblacklistedplatformType: !Not
    - !Equals
      - ''
      - !Ref 'ec2managedinstanceinventoryblacklistedplatformType'
  ec2managedinstanceplatformcheckplatformType: !Not
    - !Equals
      - ''
      - !Ref 'ec2managedinstanceplatformcheckplatformType'
  ec2managedinstanceplatformcheckplatformVersion: !Not
    - !Equals
      - ''
      - !Ref 'ec2managedinstanceplatformcheckplatformVersion'
  ec2managedinstanceplatformcheckagentVersion: !Not
    - !Equals
      - ''
      - !Ref 'ec2managedinstanceplatformcheckagentVersion'
  ec2managedinstanceplatformcheckplatformName: !Not
    - !Equals
      - ''
      - !Ref 'ec2managedinstanceplatformcheckplatformName'
  ec2resourcesprotectedbybackupplanresourceTags: !Not
    - !Equals
      - ''
      - !Ref 'ec2resourcesprotectedbybackupplanresourceTags'
  ec2resourcesprotectedbybackupplanresourceId: !Not
    - !Equals
      - ''
      - !Ref 'ec2resourcesprotectedbybackupplanresourceId'
  ec2resourcesprotectedbybackupplancrossRegionList: !Not
    - !Equals
      - ''
      - !Ref 'ec2resourcesprotectedbybackupplancrossRegionList'
  ec2resourcesprotectedbybackupplancrossAccountList: !Not
    - !Equals
      - ''
      - !Ref 'ec2resourcesprotectedbybackupplancrossAccountList'
  ec2resourcesprotectedbybackupplanmaxRetentionDays: !Not
    - !Equals
      - ''
      - !Ref 'ec2resourcesprotectedbybackupplanmaxRetentionDays'
  ec2resourcesprotectedbybackupplanminRetentionDays: !Not
    - !Equals
      - ''
      - !Ref 'ec2resourcesprotectedbybackupplanminRetentionDays'
  ec2resourcesprotectedbybackupplanbackupVaultLockCheck: !Not
    - !Equals
      - ''
      - !Ref 'ec2resourcesprotectedbybackupplanbackupVaultLockCheck'
  ec2stoppedinstanceAllowedDays: !Not
    - !Equals
      - ''
      - !Ref 'ec2stoppedinstanceAllowedDays'
  ec2volumeinusecheckdeleteOnTermination: !Not
    - !Equals
      - ''
      - !Ref 'ec2volumeinusecheckdeleteOnTermination'
  efsaccesspointenforcerootdirectoryapprovedDirectories: !Not
    - !Equals
      - ''
      - !Ref 'efsaccesspointenforcerootdirectoryapprovedDirectories'
  efsaccesspointenforceuseridentityapprovedUids: !Not
    - !Equals
      - ''
      - !Ref 'efsaccesspointenforceuseridentityapprovedUids'
  efsaccesspointenforceuseridentityapprovedGids: !Not
    - !Equals
      - ''
      - !Ref 'efsaccesspointenforceuseridentityapprovedGids'
  efsencryptedcheckKmsKeyId: !Not
    - !Equals
      - ''
      - !Ref 'efsencryptedcheckKmsKeyId'
  efslastbackuprecoverypointcreatedresourceTags: !Not
    - !Equals
      - ''
      - !Ref 'efslastbackuprecoverypointcreatedresourceTags'
  efslastbackuprecoverypointcreatedresourceId: !Not
    - !Equals
      - ''
      - !Ref 'efslastbackuprecoverypointcreatedresourceId'
  efslastbackuprecoverypointcreatedrecoveryPointAgeValue: !Not
    - !Equals
      - ''
      - !Ref 'efslastbackuprecoverypointcreatedrecoveryPointAgeValue'
  efslastbackuprecoverypointcreatedrecoveryPointAgeUnit: !Not
    - !Equals
      - ''
      - !Ref 'efslastbackuprecoverypointcreatedrecoveryPointAgeUnit'
  efsresourcesprotectedbybackupplanresourceTags: !Not
    - !Equals
      - ''
      - !Ref 'efsresourcesprotectedbybackupplanresourceTags'
  efsresourcesprotectedbybackupplanresourceId: !Not
    - !Equals
      - ''
      - !Ref 'efsresourcesprotectedbybackupplanresourceId'
  efsresourcesprotectedbybackupplancrossRegionList: !Not
    - !Equals
      - ''
      - !Ref 'efsresourcesprotectedbybackupplancrossRegionList'
  efsresourcesprotectedbybackupplancrossAccountList: !Not
    - !Equals
      - ''
      - !Ref 'efsresourcesprotectedbybackupplancrossAccountList'
  efsresourcesprotectedbybackupplanmaxRetentionDays: !Not
    - !Equals
      - ''
      - !Ref 'efsresourcesprotectedbybackupplanmaxRetentionDays'
  efsresourcesprotectedbybackupplanminRetentionDays: !Not
    - !Equals
      - ''
      - !Ref 'efsresourcesprotectedbybackupplanminRetentionDays'
  efsresourcesprotectedbybackupplanbackupVaultLockCheck: !Not
    - !Equals
      - ''
      - !Ref 'efsresourcesprotectedbybackupplanbackupVaultLockCheck'
  elasticsearchlogstocloudwatchlogTypes: !Not
    - !Equals
      - ''
      - !Ref 'elasticsearchlogstocloudwatchlogTypes'
  elbloggingenableds3BucketNames: !Not
    - !Equals
      - ''
      - !Ref 'elbloggingenableds3BucketNames'
  encryptedvolumeskmsId: !Not
    - !Equals
      - ''
      - !Ref 'encryptedvolumeskmsId'
  fmsshieldresourcepolicycheckwebACLId: !Not
    - !Equals
      - ''
      - !Ref 'fmsshieldresourcepolicycheckwebACLId'
  fmsshieldresourcepolicycheckresourceTypes: !Not
    - !Equals
      - ''
      - !Ref 'fmsshieldresourcepolicycheckresourceTypes'
  fmsshieldresourcepolicycheckresourceTags: !Not
    - !Equals
      - ''
      - !Ref 'fmsshieldresourcepolicycheckresourceTags'
  fmsshieldresourcepolicycheckexcludeResourceTags: !Not
    - !Equals
      - ''
      - !Ref 'fmsshieldresourcepolicycheckexcludeResourceTags'
  fmsshieldresourcepolicycheckfmsManagedToken: !Not
    - !Equals
      - ''
      - !Ref 'fmsshieldresourcepolicycheckfmsManagedToken'
  fmsshieldresourcepolicycheckfmsRemediationEnabled: !Not
    - !Equals
      - ''
      - !Ref 'fmsshieldresourcepolicycheckfmsRemediationEnabled'
  fmswebaclresourcepolicycheckwebACLId: !Not
    - !Equals
      - ''
      - !Ref 'fmswebaclresourcepolicycheckwebACLId'
  fmswebaclresourcepolicycheckresourceTags: !Not
    - !Equals
      - ''
      - !Ref 'fmswebaclresourcepolicycheckresourceTags'
  fmswebaclresourcepolicycheckexcludeResourceTags: !Not
    - !Equals
      - ''
      - !Ref 'fmswebaclresourcepolicycheckexcludeResourceTags'
  fmswebaclresourcepolicycheckfmsManagedToken: !Not
    - !Equals
      - ''
      - !Ref 'fmswebaclresourcepolicycheckfmsManagedToken'
  fmswebaclresourcepolicycheckfmsRemediationEnabled: !Not
    - !Equals
      - ''
      - !Ref 'fmswebaclresourcepolicycheckfmsRemediationEnabled'
  fmswebaclrulegroupassociationcheckruleGroups: !Not
    - !Equals
      - ''
      - !Ref 'fmswebaclrulegroupassociationcheckruleGroups'
  fmswebaclrulegroupassociationcheckfmsManagedToken: !Not
    - !Equals
      - ''
      - !Ref 'fmswebaclrulegroupassociationcheckfmsManagedToken'
  fmswebaclrulegroupassociationcheckfmsRemediationEnabled: !Not
    - !Equals
      - ''
      - !Ref 'fmswebaclrulegroupassociationcheckfmsRemediationEnabled'
  guarddutyenabledcentralizedCentralMonitoringAccount: !Not
    - !Equals
      - ''
      - !Ref 'guarddutyenabledcentralizedCentralMonitoringAccount'
  guarddutynonarchivedfindingsdaysLowSev: !Not
    - !Equals
      - ''
      - !Ref 'guarddutynonarchivedfindingsdaysLowSev'
  guarddutynonarchivedfindingsdaysMediumSev: !Not
    - !Equals
      - ''
      - !Ref 'guarddutynonarchivedfindingsdaysMediumSev'
  guarddutynonarchivedfindingsdaysHighSev: !Not
    - !Equals
      - ''
      - !Ref 'guarddutynonarchivedfindingsdaysHighSev'
  iamcustomerpolicyblockedkmsactionsblockedActionsPatterns: !Not
    - !Equals
      - ''
      - !Ref 'iamcustomerpolicyblockedkmsactionsblockedActionsPatterns'
  iamcustomerpolicyblockedkmsactionsexcludePermissionBoundaryPolicy: !Not
    - !Equals
      - ''
      - !Ref 'iamcustomerpolicyblockedkmsactionsexcludePermissionBoundaryPolicy'
  iaminlinepolicyblockedkmsactionsblockedActionsPatterns: !Not
    - !Equals
      - ''
      - !Ref 'iaminlinepolicyblockedkmsactionsblockedActionsPatterns'
  iaminlinepolicyblockedkmsactionsexcludeRoleByManagementAccount: !Not
    - !Equals
      - ''
      - !Ref 'iaminlinepolicyblockedkmsactionsexcludeRoleByManagementAccount'
  iampasswordpolicyRequireUppercaseCharacters: !Not
    - !Equals
      - ''
      - !Ref 'iampasswordpolicyRequireUppercaseCharacters'
  iampasswordpolicyRequireLowercaseCharacters: !Not
    - !Equals
      - ''
      - !Ref 'iampasswordpolicyRequireLowercaseCharacters'
  iampasswordpolicyRequireSymbols: !Not
    - !Equals
      - ''
      - !Ref 'iampasswordpolicyRequireSymbols'
  iampasswordpolicyRequireNumbers: !Not
    - !Equals
      - ''
      - !Ref 'iampasswordpolicyRequireNumbers'
  iampasswordpolicyMinimumPasswordLength: !Not
    - !Equals
      - ''
      - !Ref 'iampasswordpolicyMinimumPasswordLength'
  iampasswordpolicyPasswordReusePrevention: !Not
    - !Equals
      - ''
      - !Ref 'iampasswordpolicyPasswordReusePrevention'
  iampasswordpolicyMaxPasswordAge: !Not
    - !Equals
      - ''
      - !Ref 'iampasswordpolicyMaxPasswordAge'
  iampolicyblacklistedcheckpolicyArns: !Not
    - !Equals
      - ''
      - !Ref 'iampolicyblacklistedcheckpolicyArns'
  iampolicyblacklistedcheckexceptionList: !Not
    - !Equals
      - ''
      - !Ref 'iampolicyblacklistedcheckexceptionList'
  iampolicyinusepolicyARN: !Not
    - !Equals
      - ''
      - !Ref 'iampolicyinusepolicyARN'
  iampolicyinusepolicyUsageType: !Not
    - !Equals
      - ''
      - !Ref 'iampolicyinusepolicyUsageType'
  iampolicynostatementswithadminaccessexcludePermissionBoundaryPolicy: !Not
    - !Equals
      - ''
      - !Ref 'iampolicynostatementswithadminaccessexcludePermissionBoundaryPolicy'
  iampolicynostatementswithfullaccessexcludePermissionBoundaryPolicy: !Not
    - !Equals
      - ''
      - !Ref 'iampolicynostatementswithfullaccessexcludePermissionBoundaryPolicy'
  iamrolemanagedpolicycheckmanagedPolicyArns: !Not
    - !Equals
      - ''
      - !Ref 'iamrolemanagedpolicycheckmanagedPolicyArns'
  iamusergroupmembershipcheckgroupNames: !Not
    - !Equals
      - ''
      - !Ref 'iamusergroupmembershipcheckgroupNames'
  iamuserunusedcredentialscheckmaxCredentialUsageAge: !Not
    - !Equals
      - ''
      - !Ref 'iamuserunusedcredentialscheckmaxCredentialUsageAge'
  internetgatewayauthorizedvpconlyAuthorizedVpcIds: !Not
    - !Equals
      - ''
      - !Ref 'internetgatewayauthorizedvpconlyAuthorizedVpcIds'
  kmscmknotscheduledfordeletionkmsKeyIds: !Not
    - !Equals
      - ''
      - !Ref 'kmscmknotscheduledfordeletionkmsKeyIds'
  lambdaconcurrencycheckConcurrencyLimitLow: !Not
    - !Equals
      - ''
      - !Ref 'lambdaconcurrencycheckConcurrencyLimitLow'
  lambdaconcurrencycheckConcurrencyLimitHigh: !Not
    - !Equals
      - ''
      - !Ref 'lambdaconcurrencycheckConcurrencyLimitHigh'
  lambdadlqcheckdlqArns: !Not
    - !Equals
      - ''
      - !Ref 'lambdadlqcheckdlqArns'
  lambdafunctionsettingscheckruntime: !Not
    - !Equals
      - ''
      - !Ref 'lambdafunctionsettingscheckruntime'
  lambdafunctionsettingscheckrole: !Not
    - !Equals
      - ''
      - !Ref 'lambdafunctionsettingscheckrole'
  lambdafunctionsettingschecktimeout: !Not
    - !Equals
      - ''
      - !Ref 'lambdafunctionsettingschecktimeout'
  lambdafunctionsettingscheckmemorySize: !Not
    - !Equals
      - ''
      - !Ref 'lambdafunctionsettingscheckmemorySize'
  lambdainsidevpcsubnetIds: !Not
    - !Equals
      - ''
      - !Ref 'lambdainsidevpcsubnetIds'
  lambdavpcmultiazcheckavailabilityZones: !Not
    - !Equals
      - ''
      - !Ref 'lambdavpcmultiazcheckavailabilityZones'
  netfwpolicydefaultactionfragmentpacketsstatelessFragmentDefaultActions: !Not
    - !Equals
      - ''
      - !Ref 'netfwpolicydefaultactionfragmentpacketsstatelessFragmentDefaultActions'
  netfwpolicydefaultactionfullpacketsstatelessDefaultActions: !Not
    - !Equals
      - ''
      - !Ref 'netfwpolicydefaultactionfullpacketsstatelessDefaultActions'
  nounrestrictedroutetoigwrouteTableIds: !Not
    - !Equals
      - ''
      - !Ref 'nounrestrictedroutetoigwrouteTableIds'
  opensearchauditloggingenabledcloudWatchLogsLogGroupArnList: !Not
    - !Equals
      - ''
      - !Ref 'opensearchauditloggingenabledcloudWatchLogsLogGroupArnList'
  opensearchhttpsrequiredtlsPolicies: !Not
    - !Equals
      - ''
      - !Ref 'opensearchhttpsrequiredtlsPolicies'
  opensearchlogstocloudwatchlogTypes: !Not
    - !Equals
      - ''
      - !Ref 'opensearchlogstocloudwatchlogTypes'
  rdsclusterdefaultadmincheckvalidAdminUserNames: !Not
    - !Equals
      - ''
      - !Ref 'rdsclusterdefaultadmincheckvalidAdminUserNames'
  rdsenhancedmonitoringenabledmonitoringInterval: !Not
    - !Equals
      - ''
      - !Ref 'rdsenhancedmonitoringenabledmonitoringInterval'
  rdsinstancedefaultadmincheckvalidAdminUserNames: !Not
    - !Equals
      - ''
      - !Ref 'rdsinstancedefaultadmincheckvalidAdminUserNames'
  rdsinstancedeletionprotectionenableddatabaseEngines: !Not
    - !Equals
      - ''
      - !Ref 'rdsinstancedeletionprotectionenableddatabaseEngines'
  rdslastbackuprecoverypointcreatedresourceTags: !Not
    - !Equals
      - ''
      - !Ref 'rdslastbackuprecoverypointcreatedresourceTags'
  rdslastbackuprecoverypointcreatedresourceId: !Not
    - !Equals
      - ''
      - !Ref 'rdslastbackuprecoverypointcreatedresourceId'
  rdslastbackuprecoverypointcreatedrecoveryPointAgeValue: !Not
    - !Equals
      - ''
      - !Ref 'rdslastbackuprecoverypointcreatedrecoveryPointAgeValue'
  rdslastbackuprecoverypointcreatedrecoveryPointAgeUnit: !Not
    - !Equals
      - ''
      - !Ref 'rdslastbackuprecoverypointcreatedrecoveryPointAgeUnit'
  rdsloggingenabledadditionalLogs: !Not
    - !Equals
      - ''
      - !Ref 'rdsloggingenabledadditionalLogs'
  rdsresourcesprotectedbybackupplanresourceTags: !Not
    - !Equals
      - ''
      - !Ref 'rdsresourcesprotectedbybackupplanresourceTags'
  rdsresourcesprotectedbybackupplanresourceId: !Not
    - !Equals
      - ''
      - !Ref 'rdsresourcesprotectedbybackupplanresourceId'
  rdsresourcesprotectedbybackupplancrossRegionList: !Not
    - !Equals
      - ''
      - !Ref 'rdsresourcesprotectedbybackupplancrossRegionList'
  rdsresourcesprotectedbybackupplancrossAccountList: !Not
    - !Equals
      - ''
      - !Ref 'rdsresourcesprotectedbybackupplancrossAccountList'
  rdsresourcesprotectedbybackupplanmaxRetentionDays: !Not
    - !Equals
      - ''
      - !Ref 'rdsresourcesprotectedbybackupplanmaxRetentionDays'
  rdsresourcesprotectedbybackupplanminRetentionDays: !Not
    - !Equals
      - ''
      - !Ref 'rdsresourcesprotectedbybackupplanminRetentionDays'
  rdsresourcesprotectedbybackupplanbackupVaultLockCheck: !Not
    - !Equals
      - ''
      - !Ref 'rdsresourcesprotectedbybackupplanbackupVaultLockCheck'
  rdsstorageencryptedkmsKeyId: !Not
    - !Equals
      - ''
      - !Ref 'rdsstorageencryptedkmsKeyId'
  requiredtagstag1Key: !Not
    - !Equals
      - ''
      - !Ref 'requiredtagstag1Key'
  requiredtagstag1Value: !Not
    - !Equals
      - ''
      - !Ref 'requiredtagstag1Value'
  requiredtagstag2Key: !Not
    - !Equals
      - ''
      - !Ref 'requiredtagstag2Key'
  requiredtagstag2Value: !Not
    - !Equals
      - ''
      - !Ref 'requiredtagstag2Value'
  requiredtagstag3Key: !Not
    - !Equals
      - ''
      - !Ref 'requiredtagstag3Key'
  requiredtagstag3Value: !Not
    - !Equals
      - ''
      - !Ref 'requiredtagstag3Value'
  requiredtagstag4Key: !Not
    - !Equals
      - ''
      - !Ref 'requiredtagstag4Key'
  requiredtagstag4Value: !Not
    - !Equals
      - ''
      - !Ref 'requiredtagstag4Value'
  requiredtagstag5Key: !Not
    - !Equals
      - ''
      - !Ref 'requiredtagstag5Key'
  requiredtagstag5Value: !Not
    - !Equals
      - ''
      - !Ref 'requiredtagstag5Value'
  requiredtagstag6Key: !Not
    - !Equals
      - ''
      - !Ref 'requiredtagstag6Key'
  requiredtagstag6Value: !Not
    - !Equals
      - ''
      - !Ref 'requiredtagstag6Value'
  s3accountlevelpublicaccessblocksIgnorePublicAcls: !Not
    - !Equals
      - ''
      - !Ref 's3accountlevelpublicaccessblocksIgnorePublicAcls'
  s3accountlevelpublicaccessblocksBlockPublicPolicy: !Not
    - !Equals
      - ''
      - !Ref 's3accountlevelpublicaccessblocksBlockPublicPolicy'
  s3accountlevelpublicaccessblocksBlockPublicAcls: !Not
    - !Equals
      - ''
      - !Ref 's3accountlevelpublicaccessblocksBlockPublicAcls'
  s3accountlevelpublicaccessblocksRestrictPublicBuckets: !Not
    - !Equals
      - ''
      - !Ref 's3accountlevelpublicaccessblocksRestrictPublicBuckets'
  s3accountlevelpublicaccessblocksperiodicIgnorePublicAcls: !Not
    - !Equals
      - ''
      - !Ref 's3accountlevelpublicaccessblocksperiodicIgnorePublicAcls'
  s3accountlevelpublicaccessblocksperiodicBlockPublicPolicy: !Not
    - !Equals
      - ''
      - !Ref 's3accountlevelpublicaccessblocksperiodicBlockPublicPolicy'
  s3accountlevelpublicaccessblocksperiodicBlockPublicAcls: !Not
    - !Equals
      - ''
      - !Ref 's3accountlevelpublicaccessblocksperiodicBlockPublicAcls'
  s3accountlevelpublicaccessblocksperiodicRestrictPublicBuckets: !Not
    - !Equals
      - ''
      - !Ref 's3accountlevelpublicaccessblocksperiodicRestrictPublicBuckets'
  s3bucketpolicygranteecheckawsPrincipals: !Not
    - !Equals
      - ''
      - !Ref 's3bucketpolicygranteecheckawsPrincipals'
  s3bucketpolicygranteecheckservicePrincipals: !Not
    - !Equals
      - ''
      - !Ref 's3bucketpolicygranteecheckservicePrincipals'
  s3bucketpolicygranteecheckfederatedUsers: !Not
    - !Equals
      - ''
      - !Ref 's3bucketpolicygranteecheckfederatedUsers'
  s3bucketpolicygranteecheckipAddresses: !Not
    - !Equals
      - ''
      - !Ref 's3bucketpolicygranteecheckipAddresses'
  s3bucketpolicygranteecheckvpcIds: !Not
    - !Equals
      - ''
      - !Ref 's3bucketpolicygranteecheckvpcIds'
  s3bucketpolicynotmorepermissivecontrolPolicy: !Not
    - !Equals
      - ''
      - !Ref 's3bucketpolicynotmorepermissivecontrolPolicy'
  s3bucketreplicationenabledReplicationType: !Not
    - !Equals
      - ''
      - !Ref 's3bucketreplicationenabledReplicationType'
  s3bucketversioningenabledisMfaDeleteEnabled: !Not
    - !Equals
      - ''
      - !Ref 's3bucketversioningenabledisMfaDeleteEnabled'
  s3defaultencryptionkmskmsKeyArns: !Not
    - !Equals
      - ''
      - !Ref 's3defaultencryptionkmskmsKeyArns'
  s3eventnotificationsenableddestinationArn: !Not
    - !Equals
      - ''
      - !Ref 's3eventnotificationsenableddestinationArn'
  s3eventnotificationsenabledeventTypes: !Not
    - !Equals
      - ''
      - !Ref 's3eventnotificationsenabledeventTypes'
  s3lastbackuprecoverypointcreatedresourceTags: !Not
    - !Equals
      - ''
      - !Ref 's3lastbackuprecoverypointcreatedresourceTags'
  s3lastbackuprecoverypointcreatedresourceId: !Not
    - !Equals
      - ''
      - !Ref 's3lastbackuprecoverypointcreatedresourceId'
  s3lastbackuprecoverypointcreatedrecoveryPointAgeValue: !Not
    - !Equals
      - ''
      - !Ref 's3lastbackuprecoverypointcreatedrecoveryPointAgeValue'
  s3lastbackuprecoverypointcreatedrecoveryPointAgeUnit: !Not
    - !Equals
      - ''
      - !Ref 's3lastbackuprecoverypointcreatedrecoveryPointAgeUnit'
  s3lifecyclepolicychecktargetTransitionDays: !Not
    - !Equals
      - ''
      - !Ref 's3lifecyclepolicychecktargetTransitionDays'
  s3lifecyclepolicychecktargetExpirationDays: !Not
    - !Equals
      - ''
      - !Ref 's3lifecyclepolicychecktargetExpirationDays'
  s3lifecyclepolicychecktargetTransitionStorageClass: !Not
    - !Equals
      - ''
      - !Ref 's3lifecyclepolicychecktargetTransitionStorageClass'
  s3lifecyclepolicychecktargetPrefix: !Not
    - !Equals
      - ''
      - !Ref 's3lifecyclepolicychecktargetPrefix'
  s3lifecyclepolicycheckbucketNames: !Not
    - !Equals
      - ''
      - !Ref 's3lifecyclepolicycheckbucketNames'
  s3resourcesprotectedbybackupplanresourceTags: !Not
    - !Equals
      - ''
      - !Ref 's3resourcesprotectedbybackupplanresourceTags'
  s3resourcesprotectedbybackupplanresourceId: !Not
    - !Equals
      - ''
      - !Ref 's3resourcesprotectedbybackupplanresourceId'
  s3resourcesprotectedbybackupplancrossRegionList: !Not
    - !Equals
      - ''
      - !Ref 's3resourcesprotectedbybackupplancrossRegionList'
  s3resourcesprotectedbybackupplancrossAccountList: !Not
    - !Equals
      - ''
      - !Ref 's3resourcesprotectedbybackupplancrossAccountList'
  s3resourcesprotectedbybackupplanmaxRetentionDays: !Not
    - !Equals
      - ''
      - !Ref 's3resourcesprotectedbybackupplanmaxRetentionDays'
  s3resourcesprotectedbybackupplanminRetentionDays: !Not
    - !Equals
      - ''
      - !Ref 's3resourcesprotectedbybackupplanminRetentionDays'
  s3resourcesprotectedbybackupplanbackupVaultLockCheck: !Not
    - !Equals
      - ''
      - !Ref 's3resourcesprotectedbybackupplanbackupVaultLockCheck'
  s3versionlifecyclepolicycheckbucketNames: !Not
    - !Equals
      - ''
      - !Ref 's3versionlifecyclepolicycheckbucketNames'
  secretsmanagerrotationenabledcheckmaximumAllowedRotationFrequency: !Not
    - !Equals
      - ''
      - !Ref 'secretsmanagerrotationenabledcheckmaximumAllowedRotationFrequency'
  secretsmanagerrotationenabledcheckmaximumAllowedRotationFrequencyInHours: !Not
    - !Equals
      - ''
      - !Ref 'secretsmanagerrotationenabledcheckmaximumAllowedRotationFrequencyInHours'
  secretsmanagersecretperiodicrotationmaxDaysSinceRotation: !Not
    - !Equals
      - ''
      - !Ref 'secretsmanagersecretperiodicrotationmaxDaysSinceRotation'
  secretsmanagersecretunusedunusedForDays: !Not
    - !Equals
      - ''
      - !Ref 'secretsmanagersecretunusedunusedForDays'
  secretsmanagerusingcmkkmsKeyArns: !Not
    - !Equals
      - ''
      - !Ref 'secretsmanagerusingcmkkmsKeyArns'
  servicevpcendpointenabledserviceName: !Not
    - !Equals
      - ''
      - !Ref 'servicevpcendpointenabledserviceName'
